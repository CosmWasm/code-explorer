{"version":3,"sources":["contexts/ClientContext.tsx","settings.ts","components/EndpointSelector.tsx","components/FooterRow.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/InitializationInfo.tsx","pages/contract/ContractPage.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","index.tsx","components/App.tsx"],"names":["dummyContext","nodeUrl","client","CosmWasmClient","resetClient","ClientContext","React","createContext","settings","backend","devnet","nodeUrls","demonet","deployment","routerType","EndpointSelector","urls","currentUrl","urlChanged","length","className","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","separatorStyle","borderColor","whiteText","color","FooterRow","clientContext","useContext","chainId","setChainId","useState","useEffect","getChainId","then","catch","footerElements","newUrl","href","style","elements","separator","reduce","accumulator","element","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","AccountLink","address","maxLength","to","title","TransfersTable","transfers","executions","scope","execution","index","height","transactionId","msg","value","from_address","to_address","AccountPage","addressParam","useParams","account","setAccount","setTransfers","getAccount","searchTx","sentFromOrTo","execTxs","out","Array","tx","entries","types","isMsgSend","push","hash","pageTitle","aria-label","aria-current","VerifyContract","checksum","source","builder","verificationCmd","quote","CodeInfo","code","creator","ContractLink","InstanceRow","position","contract","executionCount","setExecutionCount","tags","label","undefined","CodePage","codeId","codeIdParam","parseInt","details","setDetails","contracts","setContracts","getContracts","getCodeDetails","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","ExecutionsTable","sender","InitializationInfo","JSON","stringify","initMsg","ContractPage","contractAddress","contractAddressParam","setExecutions","getContract","error","console","isMsgExecuteContract","MsgExecuteContract","sent_funds","MsgSend","TxInfo","memo","fee","gas","signatures","TxPage","txId","txIdParam","results","firstResult","find","timestamp","FlexibleRouter","children","basename","process","ReactDOM","render","setNodeUrl","setClient","contextValue","Provider","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.7397a613.chunk.js","sourcesContent":["import { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: CosmWasmClient;\n  readonly resetClient: (nodeUrl: string) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: new CosmWasmClient(\"\"),\n  resetClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n}\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst demonetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.demo-07.cosmwasm.com\"],\n};\n\nconst devnetSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:1317\"],\n};\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst knownBackends: { [index: string]: BackendSettings } = {\n  devnet: devnetSettings,\n  demonet: demonetSettings,\n};\n\nexport const settings: Settings = {\n  backend: knownBackends[process.env.REACT_APP_BACKEND || \"devnet\"],\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map(url => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { EndpointSelector } from \"./EndpointSelector\";\n\ninterface Props {}\n\nconst separatorStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction joinJsxElements(elements: readonly JSX.Element[], separator: JSX.Element): readonly JSX.Element[] {\n  return elements.reduce((accumulator: readonly JSX.Element[], element) => {\n    return accumulator.length === 0 ? [element] : [...accumulator, separator, element];\n  }, []);\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | \"error\" | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    clientContext.client\n      .getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(\"error\"));\n  }, [clientContext.client]);\n\n  const footerElements: readonly JSX.Element[] = [\n    <Fragment>\n      Endpoint{\" \"}\n      <EndpointSelector\n        currentUrl={clientContext.nodeUrl}\n        urls={settings.backend.nodeUrls}\n        urlChanged={newUrl => clientContext.resetClient(newUrl)}\n      />\n    </Fragment>,\n    <Fragment>\n      Chain ID: {chainId === \"loading\" ? \"Loading …\" : chainId === \"error\" ? \"Error\" : chainId}\n    </Fragment>,\n    <a href=\"https://github.com/confio/code-explorer\" style={whiteText}>\n      Fork me on GitHub\n    </a>,\n  ];\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={separatorStyle} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          {joinJsxElements(footerElements, <Fragment> | </Fragment>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Header(): JSX.Element {\n  return <header>{/* This is where your logo and stuff goes */}</header>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport { Decimal } from \"@iov/encoding\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: types.Coin): string {\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly types.Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/transactions/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.from_address} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.to_address} />\n            </td>\n            <td>{printableBalance(execution.msg.value.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Account, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\nexport function AccountPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { address: addressParam } = useParams();\n  const address = addressParam || \"\";\n\n  const [account, setAccount] = React.useState<Account | undefined>();\n  const [transfers, setTransfers] = React.useState<readonly Transfer[]>([]);\n\n  React.useEffect(() => {\n    clientContext.client.getAccount(address).then(setAccount);\n    clientContext.client.searchTx({ sentFromOrTo: address }).then(execTxs => {\n      const out = new Array<Transfer>();\n      for (const tx of execTxs) {\n        for (const [index, msg] of tx.tx.value.msg.entries()) {\n          if (types.isMsgSend(msg)) {\n            out.push({\n              key: `${tx.hash}_${index}`,\n              height: tx.height,\n              transactionId: tx.hash,\n              msg: msg,\n            });\n          } else {\n            // skip\n          }\n        }\n      }\n      setTransfers(out);\n    });\n  }, [address, clientContext.client]);\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance: {printableBalance(account?.balance || [])}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {transfers.length !== 0 ? <TransfersTable transfers={transfers} /> : <p>No transfer found</p>}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { CodeDetails } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport VerifyContract from \"./VerifyContract\";\n\ninterface Props {\n  readonly code: CodeDetails;\n}\n\nexport function CodeInfo({ code }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\n        <li className=\"list-group-item\">\n          <p className=\"text-muted\">\n            Code verfication allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/confio/cosmwasm-verify\" className=\"text-muted\">\n              Tell me more!\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | undefined>();\n\n  React.useEffect(() => {\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    clientContext.client.searchTx({ tags: tags }).then(execTxs => setExecutionCount(execTxs.length));\n  }, [clientContext.client, contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{executionCount === undefined ? \"Loading …\" : executionCount}</td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\n\nexport function CodePage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | undefined>();\n  const [contracts, setContracts] = React.useState<readonly Contract[]>([]);\n\n  React.useEffect(() => {\n    clientContext.client.getContracts(codeId).then(setContracts);\n    clientContext.client.getCodeDetails(codeId).then(setDetails);\n  }, [clientContext.client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size: {details ? Math.round(details.data.length / 1024) + \" KiB\" : \"Loading …\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">{details ? <CodeInfo code={details} /> : <span>Loading …</span>}</div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Label</th>\n                  <th scope=\"col\">Contract</th>\n                  <th scope=\"col\">Creator</th>\n                  <th scope=\"col\">Executions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {contracts.map((contract, index) => (\n                  <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<InstantiationInfo | undefined>();\n\n  React.useEffect(() => {\n    clientContext.client.getContracts(data.codeId).then(contracts => {\n      setInstantiationInfo({\n        instantiations: contracts.length,\n      });\n    });\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances: {instantiationInfo ? instantiationInfo.instantiations : \"Loading …\"}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    clientContext.client.getCodes().then(codeInfos => {\n      const processed = codeInfos\n        .map(\n          (response): LoadedCode => ({\n            source: clientContext.nodeUrl,\n            data: {\n              codeId: response.id,\n              checksum: response.checksum,\n              creator: response.creator,\n              source: response.source || \"\",\n              builder: response.builder || \"\",\n            },\n          }),\n        )\n        .reverse();\n      setCodes(processed);\n    });\n  }, [clientContext]);\n\n  // Display codes vertically by on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {codes === \"loading\" ? (\n        <p>Loading …</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport function CodeLink({ codeId }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>Code #{codeId}</Link>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/transactions/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractDetails } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\n\ninterface Props {\n  readonly contract: ContractDetails;\n}\n\nexport function InitializationInfo({ contract }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          <span title=\"The contract level initialization message\">Init message</span>:{\" \"}\n          <pre className=\"mb-0\">{JSON.stringify(contract.initMsg, null, \"  \")}</pre>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Account, ContractDetails, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { InitializationInfo } from \"./InitializationInfo\";\n\nexport function ContractPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<ContractDetails | \"error\" | \"loading\">(\"loading\");\n  const [account, setAccount] = React.useState<Account | undefined | \"error\" | \"loading\">(\"loading\");\n  const [executions, setExecutions] = React.useState<readonly Execution[] | \"error\" | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    clientContext.client\n      .getContract(contractAddress)\n      .then(setDetails)\n      .catch(error => {\n        console.error(error);\n        setDetails(\"error\");\n      });\n    clientContext.client\n      .getAccount(contractAddress)\n      .then(setAccount)\n      .catch(error => {\n        console.error(error);\n        setAccount(\"error\");\n      });\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contractAddress,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    clientContext.client\n      .searchTx({ tags: tags })\n      .then(execTxs => {\n        const out = new Array<Execution>();\n        for (const tx of execTxs) {\n          for (const [index, msg] of tx.tx.value.msg.entries()) {\n            if (types.isMsgExecuteContract(msg)) {\n              out.push({\n                key: `${tx.hash}_${index}`,\n                height: tx.height,\n                transactionId: tx.hash,\n                msg: msg,\n              });\n            } else {\n              // skip\n            }\n          }\n        }\n        setExecutions(out);\n      })\n      .catch(error => {\n        console.error(error);\n        setExecutions(\"error\");\n      });\n  }, [contractAddress, clientContext.client]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {details === \"loading\" ? (\n                    <span>Loading …</span>\n                  ) : details === \"error\" ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {account === \"loading\"\n                  ? \"Loading …\"\n                  : account === \"error\"\n                  ? \"Error\"\n                  : printableBalance(account?.balance || [])}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {details === \"loading\" ? (\n              <p>Loading …</p>\n            ) : details === \"error\" ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <InitializationInfo contract={details} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {executions === \"loading\" ? (\n              <p>Loading …</p>\n            ) : executions === \"error\" ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: types.MsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.value.contract} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.value.sender} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.value.sent_funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.value.msg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: types.MsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.value.from_address} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.value.to_address} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.value.amount)}</li>\n    </Fragment>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: types.CosmosSdkTx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.value.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.value.fee.amount)}</li>\n        <li className=\"list-group-item\">Gas: {tx.value.fee.gas}</li>\n        <li className=\"list-group-item\">Signatures: {tx.value.signatures.length}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { IndexedTx, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { TxInfo } from \"./TxInfo\";\n\nexport function TxPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    clientContext.client.searchTx({ id: txId }).then(results => {\n      const firstResult = results.find(() => true);\n      setDetails(firstResult);\n    });\n  }, [clientContext.client, txId]);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">\n                Height: {details === \"loading\" ? \"Loading...\" : details?.height || \"–\"}\n              </li>\n              <li className=\"list-group-item\">\n                Time: {details === \"loading\" ? \"Loading...\" : details?.timestamp || \"–\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {details === \"loading\" ? (\n              <span>Loading …</span>\n            ) : details ? (\n              <TxInfo tx={details.tx} />\n            ) : (\n              <p>Transaction not found</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {details === \"loading\" ? (\n              <p>Loading …</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              details.tx.value.msg.map((msg, index) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">Type: {msg.type}</div>\n                  <ul className=\"list-group list-group-flush\">\n                    {types.isMsgExecuteContract(msg) && <MsgExecuteContract msg={msg} />}\n                    {types.isMsgSend(msg) && <MsgSend msg={msg} />}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import \"jquery/dist/jquery.slim\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState<string>(settings.backend.nodeUrls[0]);\n  const [client, setClient] = React.useState<CosmWasmClient>(new CosmWasmClient(nodeUrl));\n\n  const contextValue: ClientContextValue = {\n    nodeUrl: nodeUrl,\n    client: client,\n    resetClient: newUrl => {\n      setNodeUrl(newUrl);\n      setClient(new CosmWasmClient(newUrl));\n    },\n  };\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n"],"sourceRoot":""}