{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","ui-utils/jsonInput.ts","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["Tx","codec","cosmos","tx","v1beta1","SignMode","signing","PublicKey","tendermint","crypto","msgStoreCodeTypeUrl","msgInstantiateContractTypeUrl","msgExecuteContractTypeUrl","isAnyMsgSend","msg","type_url","value","aminoTypes","AminoTypes","launchpadTxToStargateTx","typeRegistry","stargateTx","body","messages","map","typeUrl","fromAmino","type","isLaunchpadMsgSend","encode","fromAddress","from_address","toAddress","to_address","amount","isLaunchpadMsgStoreCode","sender","wasmByteCode","wasm_byte_code","source","builder","instantiatePermission","instantiate_permission","isLaunchpadMsgInstantiateContract","codeId","code_id","label","initMsg","init_msg","initFunds","init_funds","admin","isLaunchpadMsgExecuteContract","contract","sentFunds","sent_funds","Error","launchpadMsgToStargateMsg","memo","authInfo","signerInfos","signatures","pub_key","publicKey","create","ed25519","pubkeyType","fromBase64","secp256k1","finish","modeInfo","single","mode","SIGN_MODE_LEGACY_AMINO_JSON","sequence","Long","fromNumber","fee","gasLimit","fromString","gas","payer","undefined","granter","signature","MsgExecuteContract","MsgInstantiateContract","MsgStoreCode","cosmwasm","wasm","dummyContext","nodeUrl","client","Registry","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","devnetStargateSettings","nodeUrls","stargateEnabled","denominations","addressPrefix","gasPrice","GasPrice","devnetLaunchpadSettings","coralnetSettings","heldernetSettings","settings","backend","coralnet","heldernet","devnetLaunchpad","devnetStargate","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","isStargateClient","StargateClient","isLaunchpadClient","LaunchpadClient","loadOrCreateMnemonic","mnemonic","loaded","localStorage","getItem","loadedMnemonic","Bip39","Random","getBytes","toString","setItem","async","loadOrCreateWallet","hdPath","makeCosmoshubPath","Secp256k1HdWallet","fromMnemonic","loadLedgerWallet","ledgerTransport","TransportWebUSB","LedgerSigner","hdPaths","prefix","createSigningClient","signer","endpoint","StargateSigningClient","connectWithWallet","registry","gasLimits","upload","init","exec","migrate","send","changeAdmin","createStargateSigningClient","apiUrl","firstAddress","getAccounts","address","LaunchpadSigningClient","createLaunchpadSigningClient","disableLedgerLogin","anyNavigator","navigator","usb","Login","userAddress","setMnemonic","loading","setLoading","error","setError","login","loadWallet","signingClient","getAddressAndSigningClient","message","logout","isUserLoggedIn","disabled","title","onChange","event","target","UserAddress","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","printableBalance","balance","join","AccountLink","maxLength","to","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","decodedTx","decode","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","getAccount","account","isMsgSend","getTransferFromLaunchpadMsgSend","launchpadEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","VerifyContract","checksum","verificationCmd","quote","CodeInfo","code","uploadTxHash","creator","ContractLink","InstanceRow","position","executionCount","setExecutionCount","tags","execTxs","InstancesEmptyState","CodePage","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","text","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","transfer","recipient","coinsPlaceholder","ExecuteContract","contractAddress","executing","setExecuting","setMemo","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","jsObject","isStargateSigningClient","executeResponseResult","execute","isLaunchpadSigningClient","ExecutionsTable","HistoryInfo","contractCodeHistory","entry","operation","JSON","stringify","InitializationInfo","instantiationTxHash","queryPlaceholder","get_balance","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","isStargateMsgExecuteContract","getAndSetDetails","getContract","getAndSetContractCodeHistory","setContractCodeHistory","getContractCodeHistory","console","getAndSetInstantiationTxHash","setInstantiationTxHash","ContractPage","contractAddressParam","setExecutions","getExecutionFromStargateMsgExecuteContract","isMsgExecuteContract","getExecutionFromLaunchpadMsgExecuteContract","ExecutionInfo","success","toNumber","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","showAllCode","setShowAllCode","dataInfo","useMemo","Uint8Array","getFileType","ellideRight","toBase64","TxInfo","TxPage","txId","txIdParam","getTx","indexedTx","rawLog","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","process","App","setNodeUrl","contextValue","setContextValue","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7c2e451.chunk.js","sourcesContent":["import {\n  isMsgExecuteContract as isLaunchpadMsgExecuteContract,\n  isMsgInstantiateContract as isLaunchpadMsgInstantiateContract,\n  isMsgStoreCode as isLaunchpadMsgStoreCode,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport { fromBase64 } from \"@cosmjs/encoding\";\nimport { isMsgSend as isLaunchpadMsgSend, Msg, pubkeyType, WrappedStdTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { AminoTypes, codec } from \"@cosmjs/stargate\";\nimport Long from \"long\";\n\ntype IAny = codec.google.protobuf.IAny;\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\nconst { SignMode } = codec.cosmos.tx.signing.v1beta1;\nconst { PublicKey } = codec.tendermint.crypto;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly type_url: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.type_url === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.type_url === msgStoreCodeTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.type_url === msgInstantiateContractTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.type_url === msgExecuteContractTypeUrl && !!msg.value;\n}\n\nconst aminoTypes = new AminoTypes({\n  [msgStoreCodeTypeUrl]: \"wasm/MsgStoreCode\",\n  [msgInstantiateContractTypeUrl]: \"wasm/MsgInstantiateContract\",\n  [msgExecuteContractTypeUrl]: \"wasm/MsgExecuteContract\",\n});\n\n/* eslint-disable @typescript-eslint/camelcase */\nfunction launchpadMsgToStargateMsg(typeRegistry: Registry, msg: Msg): IAny {\n  const typeUrl = aminoTypes.fromAmino(msg.type);\n  if (isLaunchpadMsgSend(msg)) {\n    return {\n      type_url: typeUrl,\n      value: typeRegistry.encode({\n        typeUrl: typeUrl,\n        value: {\n          fromAddress: msg.value.from_address,\n          toAddress: msg.value.to_address,\n          amount: msg.value.amount,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgStoreCode(msg)) {\n    return {\n      type_url: typeUrl,\n      value: typeRegistry.encode({\n        typeUrl: typeUrl,\n        value: {\n          sender: msg.value.sender,\n          wasmByteCode: msg.value.wasm_byte_code,\n          source: msg.value.source,\n          builder: msg.value.builder,\n          instantiatePermission: msg.value.instantiate_permission,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgInstantiateContract(msg)) {\n    return {\n      type_url: typeUrl,\n      value: typeRegistry.encode({\n        typeUrl: typeUrl,\n        value: {\n          sender: msg.value.sender,\n          codeId: msg.value.code_id,\n          label: msg.value.label,\n          initMsg: msg.value.init_msg,\n          initFunds: msg.value.init_funds,\n          admin: msg.value.admin,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgExecuteContract(msg)) {\n    return {\n      type_url: msgExecuteContractTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgExecuteContractTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          contract: msg.value.contract,\n          msg: msg.value.msg,\n          sentFunds: msg.value.sent_funds,\n        },\n      }),\n    };\n  }\n  throw new Error(\"msg type not recognised\");\n}\n\nexport function launchpadTxToStargateTx(typeRegistry: Registry, tx: WrappedStdTx): Uint8Array {\n  const stargateTx: ITx = {\n    body: {\n      messages: tx.value.msg.map((msg) => launchpadMsgToStargateMsg(typeRegistry, msg)),\n      memo: tx.value.memo,\n    },\n    authInfo: {\n      signerInfos: tx.value.signatures.map(({ pub_key }) => ({\n        publicKey: {\n          type: \"/tendermint.crypto.PublicKey\",\n          value: PublicKey.encode(\n            PublicKey.create({\n              ed25519: pub_key.type === pubkeyType.ed25519 ? fromBase64(pub_key.value) : null,\n              secp256k1: pub_key.type === pubkeyType.secp256k1 ? fromBase64(pub_key.value) : null,\n            }),\n          ).finish(),\n        },\n        modeInfo: { single: { mode: SignMode.SIGN_MODE_LEGACY_AMINO_JSON } },\n        // TODO: Use real values\n        sequence: Long.fromNumber(0),\n      })),\n      fee: {\n        amount: [...tx.value.fee.amount],\n        gasLimit: Long.fromString(tx.value.fee.gas),\n        // TODO: Use real values\n        payer: undefined,\n        // TODO: Use real values\n        granter: undefined,\n      },\n    },\n    signatures: tx.value.signatures.map(({ signature }) => fromBase64(signature)),\n  };\n  return Tx.encode(Tx.create(stargateTx)).finish();\n}\n/* eslint-enable @typescript-eslint/camelcase */\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\n\nimport {\n  LaunchpadClient,\n  LaunchpadSigningClient,\n  StargateClient,\n  StargateSigningClient,\n} from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\n\nconst { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } = codec.cosmwasm.wasm.v1beta1;\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: LaunchpadClient | StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n  readonly userAddress?: string;\n  readonly setUserAddress: (newUserAddress?: string) => void;\n  readonly signingClient?: LaunchpadSigningClient | StargateSigningClient;\n  readonly setSigningClient: (newSigningClient?: LaunchpadSigningClient | StargateSigningClient) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]),\n  resetClient: () => {},\n  setUserAddress: () => {},\n  setSigningClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","import { GasPrice } from \"@cosmjs/launchpad\";\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly stargateEnabled: boolean;\n  readonly denominations: readonly string[];\n  readonly addressPrefix: string;\n  readonly gasPrice: GasPrice;\n}\n\nconst devnetStargateSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:26659\"],\n  stargateEnabled: true,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"wasm\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst devnetLaunchpadSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:1317\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"cosmos\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst coralnetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.coralnet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"coral\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst heldernetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.heldernet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"cosmos\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst knownBackends: { [index: string]: BackendSettings } = {\n  coralnet: coralnetSettings,\n  heldernet: heldernetSettings,\n  devnetLaunchpad: devnetLaunchpadSettings,\n  devnetStargate: devnetStargateSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"devnetLaunchpad\";\n  return knownBackends[id];\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  CosmWasmClient as LaunchpadClient,\n  CosmWasmFeeTable,\n  SigningCosmWasmClient as LaunchpadSigningClient,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport {\n  codec,\n  CosmWasmClient as StargateClient,\n  SigningCosmWasmClient as StargateSigningClient,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { GasLimits, makeCosmoshubPath, OfflineSigner, Secp256k1HdWallet } from \"@cosmjs/launchpad\";\nimport { LedgerSigner } from \"@cosmjs/launchpad-ledger\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nimport { settings } from \"../settings\";\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\n\nexport { LaunchpadClient, StargateClient, LaunchpadSigningClient, StargateSigningClient };\n\nexport function isStargateClient(client: LaunchpadClient | StargateClient | null): client is StargateClient {\n  return client instanceof StargateClient;\n}\n\nexport function isLaunchpadClient(\n  client: LaunchpadClient | StargateClient | null,\n): client is LaunchpadClient {\n  return client instanceof LaunchpadClient;\n}\n\nexport function isStargateSigningClient(\n  signingClient: LaunchpadSigningClient | StargateSigningClient | null,\n): signingClient is StargateSigningClient {\n  return signingClient instanceof StargateSigningClient;\n}\n\nexport function isLaunchpadSigningClient(\n  signingClient: LaunchpadClient | StargateClient | null,\n): signingClient is LaunchpadSigningClient {\n  return signingClient instanceof LaunchpadSigningClient;\n}\n\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\nexport function loadOrCreateMnemonic(mnemonic?: string): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded && !mnemonic) {\n    return loaded;\n  }\n  const loadedMnemonic = mnemonic || generateMnemonic();\n  localStorage.setItem(key, loadedMnemonic);\n  return loadedMnemonic;\n}\n\nexport type WalletLoader = (addressPrefix: string, mnemonic?: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(addressPrefix: string, mnemonic?: string): Promise<OfflineSigner> {\n  const loadedMnemonic = loadOrCreateMnemonic(mnemonic);\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1HdWallet.fromMnemonic(loadedMnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nasync function createLaunchpadSigningClient(signer: OfflineSigner): Promise<LaunchpadSigningClient> {\n  const { nodeUrls, gasPrice } = settings.backend;\n  const apiUrl = nodeUrls[0];\n\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return new LaunchpadSigningClient(apiUrl, firstAddress, signer, gasPrice, gasLimits);\n}\n\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\n  const { nodeUrls, gasPrice } = settings.backend;\n  const endpoint = nodeUrls[0];\n\n  const { MsgStoreCode, MsgInstantiateContract, MsgExecuteContract } = codec.cosmwasm.wasm.v1beta1;\n  const typeRegistry = new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]);\n\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return StargateSigningClient.connectWithWallet(endpoint, signer, {\n    registry: typeRegistry,\n    gasPrice: gasPrice,\n    gasLimits: gasLimits,\n  });\n}\n\nexport async function createSigningClient(\n  signer: OfflineSigner,\n): Promise<LaunchpadSigningClient | StargateSigningClient> {\n  return settings.backend.stargateEnabled\n    ? await createStargateSigningClient(signer)\n    : await createLaunchpadSigningClient(signer);\n}\n\nexport async function getAddressAndSigningClient(\n  loadWallet: WalletLoader,\n  mnemonic?: string,\n): Promise<[string, LaunchpadSigningClient | StargateSigningClient]> {\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\n  const userAddress = (await signer.getAccounts())[0].address;\n  const signingClient = await createSigningClient(signer);\n  return [userAddress, signingClient];\n}\n\nexport function disableLedgerLogin(): boolean {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport {\n  disableLedgerLogin,\n  getAddressAndSigningClient,\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  WalletLoader,\n} from \"../ui-utils/clients\";\n\nexport function Login(): JSX.Element {\n  const { userAddress, setUserAddress, setSigningClient } = React.useContext(ClientContext);\n  const [mnemonic, setMnemonic] = React.useState<string>();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  async function login(loadWallet: WalletLoader): Promise<void> {\n    setLoading(true);\n    setError(undefined);\n\n    try {\n      const [userAddress, signingClient] = await getAddressAndSigningClient(loadWallet, mnemonic);\n      setUserAddress(userAddress);\n      setSigningClient(signingClient);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  function logout(): void {\n    setError(undefined);\n    setUserAddress(undefined);\n    setMnemonic(undefined);\n    setSigningClient(undefined);\n  }\n\n  function renderLoginButton(): JSX.Element {\n    return loading ? (\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n        Loading...\n      </button>\n    ) : (\n      <>\n        <div className=\"mr-3 p-2 rounded bg-white\">\n          <span title=\"Mnemonic for burner wallet\">Mnemonic:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={mnemonic}\n            onChange={(event) => setMnemonic(event.target.value)}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Login\n        </button>\n        <div className=\"dropdown-menu\">\n          <h6 className=\"dropdown-header\">with</h6>\n          <button className=\"dropdown-item\" onClick={() => login(loadOrCreateWallet)}>\n            Browser wallet\n          </button>\n          <button\n            className=\"dropdown-item\"\n            onClick={() => login(loadLedgerWallet)}\n            disabled={disableLedgerLogin()}\n          >\n            Ledger wallet\n          </button>\n        </div>\n      </>\n    );\n  }\n\n  function renderLogoutButton(): JSX.Element {\n    return (\n      <button className=\"btn btn-primary\" onClick={logout}>\n        Logout\n      </button>\n    );\n  }\n\n  const isUserLoggedIn = !!userAddress;\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { userAddress } = React.useContext(ClientContext);\n\n  return userAddress ? (\n    <div className=\"mr-3 p-2 rounded bg-white\">\n      <span>My address: </span>\n      <span>{userAddress}</span>\n    </div>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\n\nimport { Login } from \"./Login\";\nimport { UserAddress } from \"./UserAddress\";\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\n      <UserAddress />\n      <Login />\n    </header>\n  );\n}\n","import { Decimal } from \"@cosmjs/math\";\nimport { codec } from \"@cosmjs/stargate\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: ICoin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly ICoin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\ntype MsgSend = codec.cosmos.bank.v1beta1.MsgSend;\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Coin, IndexedTx as LaunchpadIndexedTx, isMsgSend, MsgSend } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getTransferFromLaunchpadMsgSend(tx: LaunchpadIndexedTx) {\n  return (msg: MsgSend, i: number): Transfer => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      fromAddress: msg.value.from_address,\n      toAddress: msg.value.to_address,\n      amount: [...msg.value.amount],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  address: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getAccount(address)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce(\n        (transfers: readonly Transfer[], tx: LaunchpadIndexedTx): readonly Transfer[] => {\n          const txTransfers = tx.tx.value.msg.filter(isMsgSend).map(getTransferFromLaunchpadMsgSend(tx));\n          return [...transfers, ...txTransfers];\n        },\n        [],\n      );\n      setTransfers(out);\n    })\n    .catch(() => setBalance(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  address: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txTransfers = (decodedTx?.body?.messages ?? [])\n          .filter(isAnyMsgSend)\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n        return [...transfers, ...txTransfers];\n      }, []);\n      setTransfers(out);\n    })\n    .catch(() => setTransfers(errorState));\n};\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, address, setBalance, setTransfers)\n      : () => {},\n    [address, client, typeRegistry],\n  );\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { CodeDetails } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\nimport VerifyContract from \"./VerifyContract\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\n        <li className=\"list-group-item\">\n          <p className=\"text-muted\">\n            Code verification allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\n              Tell me more!\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n      .then((execTxs) => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [client, contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly Contract[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    (client?.searchTx({\n      tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\n    }) as Promise<ReadonlyArray<{ readonly hash: string }>>).then((results) => {\n      const first = results.find(() => true);\n      setUploadTxHash(first?.hash);\n    });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((contract, index) => (\n                    <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getCodes()\n      .then((codeInfos) => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n                source: response.source || \"\",\n                builder: response.builder || \"\",\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","// Place error box below text box, so appearing error does not push text box down\nexport const jsonInputStyle = {\n  container: { display: \"flex\", flexDirection: \"column\" },\n  body: { order: \"1\" },\n  warningBox: { order: \"2\" },\n};\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-launchpad\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { isLaunchpadSigningClient, isStargateSigningClient } from \"../../ui-utils/clients\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  transfer: { recipient: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\", amount: \"1\" },\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      if (isStargateSigningClient(signingClient)) {\n        const executeResponseResult: ExecuteResult = await signingClient.execute(\n          userAddress,\n          contractAddress,\n          msgObject.result,\n          memo,\n          coinsObject?.result,\n        );\n        setExecuteResponse({ result: executeResponseResult });\n      }\n\n      if (isLaunchpadSigningClient(signingClient)) {\n        const executeResponseResult: ExecuteResult = await signingClient.execute(\n          contractAddress,\n          msgObject.result,\n          memo,\n          coinsObject?.result,\n        );\n        setExecuteResponse({ result: executeResponseResult });\n      }\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Execute contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Memo:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={memo}\n            onChange={(event) => setMemo(event.target.value)}\n          />\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Execute contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The contract formatted input\">Response:</span>\n            <pre className=\"mb-0\">{executeResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\ntype MsgExecuteContract = codec.cosmwasm.wasm.v1beta1.MsgExecuteContract;\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <pre className=\"mb-0\">{JSON.stringify(entry.msg, null, \"  \")}</pre>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\n// eslint-disable-next-line @typescript-eslint/camelcase\nconst queryPlaceholder = { get_balance: { address: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\" } };\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    setQueryObject({ result: queryPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={queryPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport {\n  Contract,\n  ContractCodeHistoryEntry,\n  isMsgExecuteContract,\n  MsgExecuteContract,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport { Coin, IndexedTx as LaunchpadIndexedTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { ExecuteContract } from \"./ExecuteContract\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\ntype IAny = codec.google.protobuf.IAny;\n\ntype IAnyMsgExecuteContract = {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction isStargateMsgExecuteContract(msg: IAny): msg is IAnyMsgExecuteContract {\n  return msg.type_url === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  (client.searchTx({\n    tags: makeTags(\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\n    ),\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getExecutionFromLaunchpadMsgExecuteContract(tx: LaunchpadIndexedTx) {\n  return (msg: MsgExecuteContract, i: number): Execution => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      sender: msg.value.sender,\n      contract: msg.value.contract,\n      msg: msg.value.msg,\n      sentFunds: [...msg.value.sent_funds],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  contractAddress: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  client\n    .getAccount(contractAddress)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce(\n        (executions: readonly Execution[], tx: LaunchpadIndexedTx): readonly Execution[] => {\n          const txExecutions = tx.tx.value.msg\n            .filter(isMsgExecuteContract)\n            .map(getExecutionFromLaunchpadMsgExecuteContract(tx));\n          return [...executions, ...txExecutions];\n        },\n        [],\n      );\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  contractAddress: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txExecutions = (decodedTx?.body?.messages ?? [])\n          .filter(isStargateMsgExecuteContract)\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n        return [...executions, ...txExecutions];\n      }, []);\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(\n          client,\n          contractAddress,\n          typeRegistry,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : isLaunchpadClient(client)\n      ? launchpadEffect(\n          client,\n          contractAddress,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : () => {},\n    [client, contractAddress, typeRegistry],\n  );\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n                <ExecuteContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","// import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n}\n\nexport function ExecutionInfo({ tx }: Props): JSX.Element {\n  // const time = fromRfc3339(tx.timestamp);\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">Height: {tx.height}</li>\n      {/* <li className=\"list-group-item\">\n        <span title={tx.timestamp}>Time: {time.toLocaleString()}</span>\n      </li> */}\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgExecuteContract = codec.cosmwasm.wasm.v1beta1.IMsgExecuteContract;\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.sentFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.msg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgInstantiateContract = codec.cosmwasm.wasm.v1beta1.IMsgInstantiateContract;\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">Label: {msg.label}</li>\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.initFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Init message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.initMsg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgSend = codec.cosmos.bank.v1beta1.IMsgSend;\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ntype IMsgStoreCode = codec.cosmwasm.wasm.v1beta1.IMsgStoreCode;\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\n      <li className=\"list-group-item\">\n        Data: {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\ninterface Props {\n  readonly tx: ITx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n  launchpadTxToStargateTx,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  txId: string,\n  typeRegistry: Registry,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      const indexedTx = tx\n        ? {\n            height: tx.height,\n            hash: tx.hash,\n            code: tx.code,\n            rawLog: tx.rawLog,\n            tx: launchpadTxToStargateTx(typeRegistry, tx.tx),\n          }\n        : undefined;\n      setDetails(indexedTx);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, txId, setDetails)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, txId, typeRegistry, setDetails)\n      : () => {},\n    [client, txId, typeRegistry],\n  );\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo tx={details} />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg, index) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    Message {index + 1} (Type: {msg.type_url || <em>unset</em>})\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport {\n  LaunchpadClient,\n  LaunchpadSigningClient,\n  StargateClient,\n  StargateSigningClient,\n} from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nconst { nodeUrls, stargateEnabled } = settings.backend;\nconst { MsgStoreCode, MsgInstantiateContract, MsgExecuteContract } = codec.cosmwasm.wasm.v1beta1;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [userAddress, setUserAddress] = React.useState<string>();\n  const [signingClient, setSigningClient] = React.useState<LaunchpadSigningClient | StargateSigningClient>();\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n    userAddress: userAddress,\n    setUserAddress: setUserAddress,\n    signingClient: signingClient,\n    setSigningClient: setSigningClient,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = stargateEnabled ? await StargateClient.connect(nodeUrl) : new LaunchpadClient(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\n  }, [signingClient]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\n  }, [userAddress]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}