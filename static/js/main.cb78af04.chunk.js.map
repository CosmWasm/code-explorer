{"version":3,"sources":["settings.ts","code/InstanceRow.tsx","code/VerifyContract.tsx","code/CodePage.tsx","ui-utils/index.ts","codeslist/Code.tsx","codeslist/Codes.tsx","codeslist/CodeslistPage.tsx","components/CodeLink.tsx","contract/ContractPage.tsx","index.tsx"],"names":["settings","nodeUrl","InstanceRow","position","contract","executionCount","setExecutionCount","React","useState","useEffect","client","CosmWasmClient","tags","key","value","address","searchTx","then","execTxs","length","scope","label","to","creator","undefined","VerifyContract","checksum","source","builder","verificationCmd","quote","CodePage","codeId","codeIdParam","useParams","parseInt","details","setDetails","contracts","setContracts","getContracts","getCodeDetails","pageTitle","className","aria-label","aria-current","Math","round","data","href","map","index","ellideMiddle","str","maxOutLen","frontLen","ceil","tailLen","floor","slice","Code","instantiationInfo","setInstantiationInfo","instantiations","Codes","codes","setCodes","getCodes","codeInfos","processed","response","id","reverse","code","CodeslistPage","CodeLink","ContractPage","contractAddress","contractAddressParam","executions","setExecutions","getContract","out","Array","tx","msg","entries","types","isMsgExecuteContract","push","hash","transactionId","title","JSON","stringify","initMsg","execution","sender","ReactDOM","render","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.cb78af04.chunk.js","sourcesContent":["export interface Settings {\n  readonly nodeUrl: string;\n}\n\nconst demonetSettings: Settings = {\n  nodeUrl: \"https://lcd.demo.cosmwasm.com\",\n};\n\nconst devnetSettings: Settings = {\n  nodeUrl: \"http://localhost:1317\",\n};\n\nexport const settings = process.env.NODE_ENV === \"development\" ? devnetSettings : demonetSettings;\n","import { Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../settings\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const [executionCount, setExecutionCount] = React.useState<number | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.nodeUrl);\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => setExecutionCount(execTxs.length));\n  }, [contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <Link to={`/contracts/${contract.address}`}>{contract.address}</Link>\n      </td>\n      <td>{contract.creator}</td>\n      <td>{executionCount === undefined ? \"Loading …\" : executionCount}</td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { settings } from \"../settings\";\nimport InstanceRow from \"./InstanceRow\";\nimport VerifyContract from \"./VerifyContract\";\n\nfunction CodePage(): JSX.Element {\n  const { codeId: codeIdParam } = useParams();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | undefined>();\n  const [contracts, setContracts] = React.useState<readonly Contract[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.nodeUrl);\n    client.getContracts(codeId).then(setContracts);\n    client.getCodeDetails(codeId).then(setDetails);\n  }, [codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"container mt-3 code-container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                {pageTitle}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>{pageTitle}</h1>\n          <ul className=\"list-group list-group-horizontal\">\n            <li className=\"list-group-item\">Type: Wasm</li>\n            <li className=\"list-group-item\">\n              Size: {details ? Math.round(details.data.length / 1024) + \" KiB\" : \"Loading …\"}\n            </li>\n          </ul>\n        </div>\n        <div className=\"col\">\n          <h2>Verification</h2>\n          <p>\n            Code verfication allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/confio/cosmwasm-verify\">Tell me more!</a>\n          </p>\n          <p>\n            {details ? (\n              <VerifyContract checksum={details.checksum} source={details.source} builder={details.builder} />\n            ) : (\n              <span>Loading …</span>\n            )}\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Instances</h2>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Label</th>\n                <th scope=\"col\">Address</th>\n                <th scope=\"col\">Creator</th>\n                <th scope=\"col\">Executions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contracts.map((contract, index) => (\n                <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CodePage;\n","export function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n","import \"./Code.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../settings\";\nimport { ellideMiddle } from \"../ui-utils\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data }: Props): JSX.Element {\n  const [instantiationInfo, setInstantiationInfo] = React.useState<InstantiationInfo | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.nodeUrl);\n    client.getContracts(data.codeId).then(contracts => {\n      setInstantiationInfo({\n        instantiations: contracts.length,\n      });\n    });\n  }, [data.codeId]);\n\n  return (\n    <div className=\"p-2 flex-grow-1\">\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {data.creator}\n          <br />\n          Source: {ellideMiddle(data.source, 45) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances: {instantiationInfo ? instantiationInfo.instantiations : \"Loading …\"}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { settings } from \"../settings\";\nimport { Code, CodeData } from \"./Code\";\n\nexport function Codes(): JSX.Element {\n  const [codes, setCodes] = React.useState<readonly CodeData[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.nodeUrl);\n    client.getCodes().then(codeInfos => {\n      const processed = codeInfos\n        .map(\n          (response): CodeData => ({\n            codeId: response.id,\n            checksum: response.checksum,\n            creator: response.creator,\n            source: response.source || \"\",\n            builder: response.builder || \"\",\n          }),\n        )\n        .reverse();\n      setCodes(processed);\n    });\n  }, []);\n\n  return (\n    <div className=\"d-flex flex-wrap mb-3\">\n      {codes.map(code => (\n        <Code data={code} key={code.codeId} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { Codes } from \"./Codes\";\n\nfunction CodeslistPage(): JSX.Element {\n  return (\n    <div className=\"container mt-3\">\n      <Codes />\n    </div>\n  );\n}\n\nexport default CodeslistPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport default function CodeLink({ codeId }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>Code #{codeId}</Link>;\n}\n","import \"./ContractPage.css\";\n\nimport { ContractDetails, CosmWasmClient, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport CodeLink from \"../components/CodeLink\";\nimport { settings } from \"../settings\";\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Execution {\n  readonly key: string;\n  readonly transactionId: string;\n  readonly msg: types.MsgExecuteContract;\n}\n\nfunction ContractPage(): JSX.Element {\n  const { contractAddress: contractAddressParam } = useParams();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<ContractDetails | undefined>();\n  const [executions, setExecutions] = React.useState<readonly Execution[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.nodeUrl);\n    client.getContract(contractAddress).then(setDetails);\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contractAddress,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => {\n      const out = new Array<Execution>();\n      for (const tx of execTxs) {\n        for (const [index, msg] of tx.tx.value.msg.entries()) {\n          if (types.isMsgExecuteContract(msg)) {\n            out.push({\n              key: `${tx.hash}_${index}`,\n              msg: msg,\n              transactionId: tx.hash,\n            });\n          } else {\n            // skip\n          }\n        }\n      }\n      setExecutions(out);\n    });\n  }, [contractAddress]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"container mt-3 contract-container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"breadcrumb-item\">\n                {details ? <CodeLink codeId={details.codeId} /> : <span>Loading …</span>}\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                {pageTitle}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>{pageTitle}</h1>\n        </div>\n        <div className=\"col\">\n          <h2>Init message</h2>\n          <pre>\n            <code>{details ? JSON.stringify(details.initMsg, null, 2) : \"Loading …\"}</code>\n          </pre>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Executions</h2>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Transaction ID</th>\n                <th scope=\"col\">Sender</th>\n              </tr>\n            </thead>\n            <tbody>\n              {executions.map((execution, index) => (\n                <tr key={execution.key}>\n                  <th scope=\"row\">{index + 1}</th>\n                  <td>{execution.transactionId}</td>\n                  <td>{execution.msg.value.sender}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContractPage;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport CodePage from \"./code/CodePage\";\nimport CodeslistPage from \"./codeslist/CodeslistPage\";\nimport ContractPage from \"./contract/ContractPage\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/codes/:codeId\" component={CodePage} />\n      <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n      <Route component={() => <CodeslistPage />} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}