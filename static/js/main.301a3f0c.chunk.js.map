{"version":3,"sources":["contexts/ClientContext.tsx","settings/index.ts","settings/backend.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/InitializationInfo.tsx","pages/contract/ContractPage.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","index.tsx","components/App.tsx"],"names":["dummyContext","nodeUrl","client","CosmWasmClient","resetClient","ClientContext","React","createContext","settings","backend","devnet","nodeUrls","demonet","regen","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","AccountLink","address","maxLength","to","title","TransfersTable","transfers","executions","scope","execution","index","transactionId","msg","value","from_address","to_address","AccountPage","addressParam","useParams","account","setAccount","setTransfers","getAccount","searchTx","sentFromOrTo","execTxs","out","Array","tx","entries","types","isMsgSend","push","hash","pageTitle","aria-current","VerifyContract","checksum","source","builder","verificationCmd","quote","CodeInfo","code","creator","ContractLink","InstanceRow","position","contract","executionCount","setExecutionCount","tags","label","InstancesEmptyState","CodePage","codeId","codeIdParam","parseInt","details","setDetails","contracts","setContracts","getContracts","getCodeDetails","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","ExecutionsTable","sender","InitializationInfo","JSON","stringify","initMsg","ContractPage","contractAddress","contractAddressParam","setExecutions","getContract","error","console","isMsgExecuteContract","MsgExecuteContract","sent_funds","MsgSend","TxInfo","memo","fee","gas","signatures","TxPage","txId","txIdParam","results","firstResult","find","timestamp","undefined","FlexibleRouter","children","basename","process","ReactDOM","render","setNodeUrl","setClient","contextValue","Provider","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.301a3f0c.chunk.js","sourcesContent":["import { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: CosmWasmClient;\n  readonly resetClient: (nodeUrl: string) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: new CosmWasmClient(\"\"),\n  resetClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","export type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n}\n\nconst demonetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.demo-07.cosmwasm.com\"],\n};\n\nconst devnetSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:1317\"],\n};\n\nconst regenSettings: BackendSettings = {\n  nodeUrls: [\"https://regen-lcd.vitwit.com\", \"https://regen-relay.01node.com\"],\n};\n\nconst knownBackends: { [index: string]: BackendSettings } = {\n  devnet: devnetSettings,\n  demonet: demonetSettings,\n  regen: regenSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  return knownBackends[process.env.REACT_APP_BACKEND || \"devnet\"];\n}\n","import { isNonNullObject } from \"@iov/encoding\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map(url => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    clientContext.client\n      .getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [clientContext.client]);\n\n  React.useEffect(() => {\n    clientContext.client\n      .getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [clientContext.client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={clientContext.nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={newUrl => clientContext.resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Header(): JSX.Element {\n  return <header>{/* This is where your logo and stuff goes */}</header>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport { Decimal } from \"@iov/encoding\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: types.Coin): string {\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly types.Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/transactions/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.from_address} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.to_address} />\n            </td>\n            <td>{printableBalance(execution.msg.value.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Account, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\nexport function AccountPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { address: addressParam } = useParams();\n  const address = addressParam || \"\";\n\n  const [account, setAccount] = React.useState<Account | undefined | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    clientContext.client\n      .getAccount(address)\n      .then(setAccount)\n      .catch(() => setAccount(errorState));\n    clientContext.client\n      .searchTx({ sentFromOrTo: address })\n      .then(execTxs => {\n        const out = new Array<Transfer>();\n        for (const tx of execTxs) {\n          for (const [index, msg] of tx.tx.value.msg.entries()) {\n            if (types.isMsgSend(msg)) {\n              out.push({\n                key: `${tx.hash}_${index}`,\n                height: tx.height,\n                transactionId: tx.hash,\n                msg: msg,\n              });\n            } else {\n              // skip\n            }\n          }\n        }\n        setTransfers(out);\n      })\n      .catch(() => setAccount(errorState));\n  }, [address, clientContext.client]);\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(account)\n                  ? \"Loading …\"\n                  : isErrorState(account)\n                  ? \"Error\"\n                  : printableBalance(account?.balance || [])}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { CodeDetails } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport VerifyContract from \"./VerifyContract\";\n\ninterface Props {\n  readonly code: CodeDetails;\n}\n\nexport function CodeInfo({ code }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\n        <li className=\"list-group-item\">\n          <p className=\"text-muted\">\n            Code verfication allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\n              Tell me more!\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    clientContext.client\n      .searchTx({ tags: tags })\n      .then(execTxs => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [clientContext.client, contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly Contract[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    clientContext.client\n      .getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    clientContext.client\n      .getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n  }, [clientContext.client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((contract, index) => (\n                    <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    clientContext.client\n      .getContracts(data.codeId)\n      .then(contracts => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    clientContext.client\n      .getCodes()\n      .then(codeInfos => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: clientContext.nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n                source: response.source || \"\",\n                builder: response.builder || \"\",\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [clientContext]);\n\n  // Display codes vertically by on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport function CodeLink({ codeId }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>Code #{codeId}</Link>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/transactions/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>\n              <AccountLink address={execution.msg.value.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractDetails } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\n\ninterface Props {\n  readonly contract: ContractDetails;\n}\n\nexport function InitializationInfo({ contract }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          <span title=\"The contract level initialization message\">Init message</span>:{\" \"}\n          <pre className=\"mb-0\">{JSON.stringify(contract.initMsg, null, \"  \")}</pre>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Account, ContractDetails, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { InitializationInfo } from \"./InitializationInfo\";\n\nexport function ContractPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<ContractDetails | ErrorState | LoadingState>(loadingState);\n  const [account, setAccount] = React.useState<Account | undefined | ErrorState | LoadingState>(loadingState);\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    clientContext.client\n      .getContract(contractAddress)\n      .then(setDetails)\n      .catch(error => {\n        console.error(error);\n        setDetails(errorState);\n      });\n    clientContext.client\n      .getAccount(contractAddress)\n      .then(setAccount)\n      .catch(error => {\n        console.error(error);\n        setAccount(errorState);\n      });\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contractAddress,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    clientContext.client\n      .searchTx({ tags: tags })\n      .then(execTxs => {\n        const out = new Array<Execution>();\n        for (const tx of execTxs) {\n          for (const [index, msg] of tx.tx.value.msg.entries()) {\n            if (types.isMsgExecuteContract(msg)) {\n              out.push({\n                key: `${tx.hash}_${index}`,\n                height: tx.height,\n                transactionId: tx.hash,\n                msg: msg,\n              });\n            } else {\n              // skip\n            }\n          }\n        }\n        setExecutions(out);\n      })\n      .catch(error => {\n        console.error(error);\n        setExecutions(errorState);\n      });\n  }, [contractAddress, clientContext.client]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(account)\n                  ? \"Loading …\"\n                  : isErrorState(account)\n                  ? \"Error\"\n                  : printableBalance(account?.balance || [])}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <InitializationInfo contract={details} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: types.MsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.value.contract} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.value.sender} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.value.sent_funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.value.msg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: types.MsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.value.from_address} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.value.to_address} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.value.amount)}</li>\n    </Fragment>\n  );\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: types.CosmosSdkTx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.value.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.value.fee.amount)}</li>\n        <li className=\"list-group-item\">Gas: {tx.value.fee.gas}</li>\n        <li className=\"list-group-item\">Signatures: {tx.value.signatures.length}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { IndexedTx, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { TxInfo } from \"./TxInfo\";\n\nexport function TxPage(): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    clientContext.client\n      .searchTx({ id: txId })\n      .then(results => {\n        const firstResult = results.find(() => true);\n        setDetails(firstResult);\n      })\n      .catch(() => setDetails(errorState));\n  }, [clientContext.client, txId]);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">\n                Height:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading...\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : details?.height || \"–\"}\n              </li>\n              <li className=\"list-group-item\">\n                Time:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading...\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : details?.timestamp || \"–\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : details ? (\n              <TxInfo tx={details.tx} />\n            ) : (\n              <p>Transaction not found</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              details.tx.value.msg.map((msg, index) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">Type: {msg.type}</div>\n                  <ul className=\"list-group list-group-flush\">\n                    {types.isMsgExecuteContract(msg) && <MsgExecuteContract msg={msg} />}\n                    {types.isMsgSend(msg) && <MsgSend msg={msg} />}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState<string>(settings.backend.nodeUrls[0]);\n  const [client, setClient] = React.useState<CosmWasmClient>(new CosmWasmClient(nodeUrl));\n\n  const contextValue: ClientContextValue = {\n    nodeUrl: nodeUrl,\n    client: client,\n    resetClient: newUrl => {\n      setNodeUrl(newUrl);\n      setClient(new CosmWasmClient(newUrl));\n    },\n  };\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n"],"sourceRoot":""}