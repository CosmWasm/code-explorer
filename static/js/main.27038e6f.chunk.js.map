{"version":3,"sources":["contexts/ClientContext.tsx","settings/index.ts","settings/backend.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","components/Header.tsx","ui-utils/index.ts","ui-utils/clients.ts","ui-utils/txs.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["dummyContext","nodeUrl","client","typeRegistry","Registry","resetClient","ClientContext","React","createContext","settings","backend","coralnet","nodeUrls","stargateEnabled","denominations","heldernet","devnetLaunchpad","devnetStargate","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","isStargateClient","StargateClient","isLaunchpadClient","LaunchpadClient","Tx","codec","cosmos","tx","v1beta1","SignMode","signing","PublicKey","tendermint","crypto","msgSendTypeUrl","isAnyMsgSend","msg","type_url","value","launchpadTxToStargateTx","stargateTx","body","messages","stargateMsg","isLaunchpadMsgSend","encode","typeUrl","fromAddress","from_address","toAddress","to_address","isLaunchpadMsgStoreCode","sender","wasmByteCode","wasm_byte_code","source","builder","instantiatePermission","instantiate_permission","isLaunchpadMsgInstantiateContract","codeId","code_id","label","initMsg","init_msg","initFunds","init_funds","admin","isLaunchpadMsgExecuteContract","contract","sentFunds","sent_funds","Error","launchpadMsgToStargateMsg","memo","authInfo","signerInfos","signatures","pub_key","publicKey","create","ed25519","pubkeyType","fromBase64","secp256k1","finish","modeInfo","single","mode","SIGN_MODE_LEGACY_AMINO_JSON","sequence","Long","fromNumber","fee","gasLimit","fromString","gas","payer","undefined","granter","signature","AccountLink","address","maxLength","to","title","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","decodedTx","decode","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","getAccount","account","isMsgSend","getTransferFromLaunchpadMsgSend","launchpadEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","VerifyContract","checksum","verificationCmd","quote","CodeInfo","code","uploadTxHash","creator","ContractLink","InstanceRow","position","executionCount","setExecutionCount","tags","execTxs","InstancesEmptyState","CodePage","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","text","ExecutionsTable","HistoryInfo","contractCodeHistory","entry","operation","JSON","stringify","InitializationInfo","instantiationTxHash","QueryContract","contractAddress","error","setError","queryObject","setQueryObject","queryResponse","setQueryResponse","width","placeholder","get_balance","confirmGood","container","display","flexDirection","order","warningBox","onChange","jsObject","result","cursor","async","queryResponseResult","queryContractSmart","formattedResult","message","disabled","isStargateMsgExecuteContract","getAndSetDetails","getContract","getAndSetContractCodeHistory","setContractCodeHistory","getContractCodeHistory","console","getAndSetInstantiationTxHash","setInstantiationTxHash","ContractPage","contractAddressParam","setExecutions","getExecutionFromStargateMsgExecuteContract","isMsgExecuteContract","getExecutionFromLaunchpadMsgExecuteContract","ExecutionInfo","success","MsgExecuteContract","MsgInstantiateContract","toNumber","MsgSend","arrayStartsWith","a","prefix","b","some","byte","arrayEqual","magic","gzip","fromHex","wasm","MsgStoreCode","showAllCode","setShowAllCode","dataInfo","useMemo","Uint8Array","getFileType","ellideRight","toBase64","TxInfo","TxPage","txId","txIdParam","getTx","indexedTx","rawLog","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","process","cosmwasm","App","setNodeUrl","contextValue","setContextValue","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27038e6f.chunk.js","sourcesContent":["import { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\n\nimport { LaunchpadClient, StargateClient } from \"../ui-utils/clients\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: LaunchpadClient | StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry(),\n  resetClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","export type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly stargateEnabled: boolean;\n  readonly denominations: readonly string[];\n}\n\nconst devnetStargateSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:26659\"],\n  stargateEnabled: true,\n  denominations: [\"ucosm\", \"ustake\"],\n};\n\nconst devnetLaunchpadSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:1317\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n};\n\nconst coralnetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.coralnet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n};\n\nconst heldernetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.heldernet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n};\n\nconst knownBackends: { [index: string]: BackendSettings } = {\n  coralnet: coralnetSettings,\n  heldernet: heldernetSettings,\n  devnetLaunchpad: devnetLaunchpadSettings,\n  devnetStargate: devnetStargateSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"devnetLaunchpad\";\n  return knownBackends[id];\n}\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Header(): JSX.Element {\n  return <header>{/* This is where your logo and stuff goes */}</header>;\n}\n","import { Decimal } from \"@cosmjs/math\";\nimport { codec } from \"@cosmjs/stargate\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: ICoin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly ICoin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import { CosmWasmClient as LaunchpadClient } from \"@cosmjs/cosmwasm\";\nimport { CosmWasmClient as StargateClient } from \"@cosmjs/cosmwasm-stargate\";\n\nexport { LaunchpadClient, StargateClient };\n\nexport function isStargateClient(client: LaunchpadClient | StargateClient | null): client is StargateClient {\n  return client instanceof StargateClient;\n}\n\nexport function isLaunchpadClient(\n  client: LaunchpadClient | StargateClient | null,\n): client is LaunchpadClient {\n  return client instanceof LaunchpadClient;\n}\n","import {\n  isMsgExecuteContract as isLaunchpadMsgExecuteContract,\n  isMsgInstantiateContract as isLaunchpadMsgInstantiateContract,\n  isMsgStoreCode as isLaunchpadMsgStoreCode,\n} from \"@cosmjs/cosmwasm\";\nimport { fromBase64 } from \"@cosmjs/encoding\";\nimport { isMsgSend as isLaunchpadMsgSend, Msg, pubkeyType, WrappedStdTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec } from \"@cosmjs/stargate\";\nimport Long from \"long\";\n\ntype IAny = codec.google.protobuf.IAny;\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\nconst { SignMode } = codec.cosmos.tx.signing.v1beta1;\nconst { PublicKey } = codec.tendermint.crypto;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly type_url: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.type_url === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgStoreCode\" && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgInstantiateContract\" && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\n/* eslint-disable @typescript-eslint/camelcase */\nfunction launchpadMsgToStargateMsg(typeRegistry: Registry, msg: Msg): IAny {\n  if (isLaunchpadMsgSend(msg)) {\n    return {\n      type_url: msgSendTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgSendTypeUrl,\n        value: {\n          fromAddress: msg.value.from_address,\n          toAddress: msg.value.to_address,\n          amount: msg.value.amount,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgStoreCode(msg)) {\n    return {\n      type_url: msgStoreCodeTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgStoreCodeTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          wasmByteCode: msg.value.wasm_byte_code,\n          source: msg.value.source,\n          builder: msg.value.builder,\n          instantiatePermission: msg.value.instantiate_permission,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgInstantiateContract(msg)) {\n    return {\n      type_url: msgInstantiateContractTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgInstantiateContractTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          codeId: msg.value.code_id,\n          label: msg.value.label,\n          initMsg: msg.value.init_msg,\n          initFunds: msg.value.init_funds,\n          admin: msg.value.admin,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgExecuteContract(msg)) {\n    return {\n      type_url: msgExecuteContractTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgExecuteContractTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          contract: msg.value.contract,\n          msg: msg.value.msg,\n          sentFunds: msg.value.sent_funds,\n        },\n      }),\n    };\n  }\n  throw new Error(\"msg type not recognised\");\n}\n\nexport function launchpadTxToStargateTx(typeRegistry: Registry, tx: WrappedStdTx): Uint8Array {\n  const stargateTx: ITx = {\n    body: {\n      messages: tx.value.msg.map((msg) => {\n        const stargateMsg = launchpadMsgToStargateMsg(typeRegistry, msg);\n        return {\n          typeUrl: stargateMsg.type_url ?? \"\",\n          value: stargateMsg.value,\n        };\n      }),\n      memo: tx.value.memo,\n    },\n    authInfo: {\n      signerInfos: tx.value.signatures.map(({ pub_key }) => ({\n        publicKey: {\n          type: \"/tendermint.crypto.PublicKey\",\n          value: PublicKey.encode(\n            PublicKey.create({\n              ed25519: pub_key.type === pubkeyType.ed25519 ? fromBase64(pub_key.value) : null,\n              secp256k1: pub_key.type === pubkeyType.secp256k1 ? fromBase64(pub_key.value) : null,\n            }),\n          ).finish(),\n        },\n        modeInfo: { single: { mode: SignMode.SIGN_MODE_LEGACY_AMINO_JSON } },\n        // TODO: Use real values\n        sequence: Long.fromNumber(0),\n      })),\n      fee: {\n        amount: [...tx.value.fee.amount],\n        gasLimit: Long.fromString(tx.value.fee.gas),\n        // TODO: Use real values\n        payer: undefined,\n        // TODO: Use real values\n        granter: undefined,\n      },\n    },\n    signatures: tx.value.signatures.map(({ signature }) => fromBase64(signature)),\n  };\n  return Tx.encode(Tx.create(stargateTx)).finish();\n}\n/* eslint-enable @typescript-eslint/camelcase */\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\ntype MsgSend = codec.cosmos.bank.v1beta1.MsgSend;\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Coin, IndexedTx as LaunchpadIndexedTx, isMsgSend, MsgSend } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getTransferFromLaunchpadMsgSend(tx: LaunchpadIndexedTx) {\n  return (msg: MsgSend, i: number): Transfer => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      fromAddress: msg.value.from_address,\n      toAddress: msg.value.to_address,\n      amount: [...msg.value.amount],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  address: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getAccount(address)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce(\n        (transfers: readonly Transfer[], tx: LaunchpadIndexedTx): readonly Transfer[] => {\n          const txTransfers = tx.tx.value.msg.filter(isMsgSend).map(getTransferFromLaunchpadMsgSend(tx));\n          return [...transfers, ...txTransfers];\n        },\n        [],\n      );\n      setTransfers(out);\n    })\n    .catch(() => setBalance(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  address: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txTransfers = (decodedTx?.body?.messages ?? [])\n          .filter(isAnyMsgSend)\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n        return [...transfers, ...txTransfers];\n      }, []);\n      setTransfers(out);\n    })\n    .catch(() => setTransfers(errorState));\n};\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, address, setBalance, setTransfers)\n      : () => {},\n    [address, client, typeRegistry],\n  );\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { CodeDetails } from \"@cosmjs/cosmwasm\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\nimport VerifyContract from \"./VerifyContract\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\n        <li className=\"list-group-item\">\n          <p className=\"text-muted\">\n            Code verification allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\n              Tell me more!\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n      .then((execTxs) => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [client, contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract } from \"@cosmjs/cosmwasm\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly Contract[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    (client?.searchTx({\n      tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\n    }) as Promise<ReadonlyArray<{ readonly hash: string }>>).then((results) => {\n      const first = results.find(() => true);\n      setUploadTxHash(first?.hash);\n    });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((contract, index) => (\n                    <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getCodes()\n      .then((codeInfos) => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n                source: response.source || \"\",\n                builder: response.builder || \"\",\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\ntype MsgExecuteContract = codec.cosmwasm.wasm.v1beta1.MsgExecuteContract;\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm\";\nimport React from \"react\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <pre className=\"mb-0\">{JSON.stringify(entry.msg, null, \"  \")}</pre>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { Result } from \"./ContractPage\";\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            placeholder={{ get_balance: { address: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\" } }}\n            confirmGood={false}\n            /* Place error box below text box, so appearing error does not push text box down */\n            style={{\n              container: { display: \"flex\", flexDirection: \"column\" },\n              body: { order: \"1\" },\n              warningBox: { order: \"2\" },\n            }}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport {\n  Contract,\n  ContractCodeHistoryEntry,\n  isMsgExecuteContract,\n  MsgExecuteContract,\n} from \"@cosmjs/cosmwasm\";\nimport { Coin, IndexedTx as LaunchpadIndexedTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\ntype IAny = codec.google.protobuf.IAny;\n\ntype IAnyMsgExecuteContract = {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction isStargateMsgExecuteContract(msg: IAny): msg is IAnyMsgExecuteContract {\n  return msg.type_url === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  (client.searchTx({\n    tags: makeTags(\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\n    ),\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getExecutionFromLaunchpadMsgExecuteContract(tx: LaunchpadIndexedTx) {\n  return (msg: MsgExecuteContract, i: number): Execution => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      sender: msg.value.sender,\n      contract: msg.value.contract,\n      msg: msg.value.msg,\n      sentFunds: [...msg.value.sent_funds],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  contractAddress: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  client\n    .getAccount(contractAddress)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce(\n        (executions: readonly Execution[], tx: LaunchpadIndexedTx): readonly Execution[] => {\n          const txExecutions = tx.tx.value.msg\n            .filter(isMsgExecuteContract)\n            .map(getExecutionFromLaunchpadMsgExecuteContract(tx));\n          return [...executions, ...txExecutions];\n        },\n        [],\n      );\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  contractAddress: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txExecutions = (decodedTx?.body?.messages ?? [])\n          .filter(isStargateMsgExecuteContract)\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n        return [...executions, ...txExecutions];\n      }, []);\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(\n          client,\n          contractAddress,\n          typeRegistry,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : isLaunchpadClient(client)\n      ? launchpadEffect(\n          client,\n          contractAddress,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : () => {},\n    [client, contractAddress, typeRegistry],\n  );\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","// import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n}\n\nexport function ExecutionInfo({ tx }: Props): JSX.Element {\n  // const time = fromRfc3339(tx.timestamp);\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">Height: {tx.height}</li>\n      {/* <li className=\"list-group-item\">\n        <span title={tx.timestamp}>Time: {time.toLocaleString()}</span>\n      </li> */}\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgExecuteContract = codec.cosmwasm.wasm.v1beta1.IMsgExecuteContract;\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.sentFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.msg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgInstantiateContract = codec.cosmwasm.wasm.v1beta1.IMsgInstantiateContract;\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">Label: {msg.label}</li>\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.initFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Init message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.initMsg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgSend = codec.cosmos.bank.v1beta1.IMsgSend;\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ntype IMsgStoreCode = codec.cosmwasm.wasm.v1beta1.IMsgStoreCode;\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\n      <li className=\"list-group-item\">\n        Data: {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\ninterface Props {\n  readonly tx: ITx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n  launchpadTxToStargateTx,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  txId: string,\n  typeRegistry: Registry,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      const indexedTx = tx\n        ? {\n            height: tx.height,\n            hash: tx.hash,\n            code: tx.code,\n            rawLog: tx.rawLog,\n            tx: launchpadTxToStargateTx(typeRegistry, tx.tx),\n          }\n        : undefined;\n      setDetails(indexedTx);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, txId, setDetails)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, txId, typeRegistry, setDetails)\n      : () => {},\n    [client, txId, typeRegistry],\n  );\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo tx={details} />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg, index) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">Type: {msg.type_url}</div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) && (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    )}\n                    {isAnyMsgStoreCode(msg) && (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    )}\n                    {isAnyMsgInstantiateContract(msg) && (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    )}\n                    {isAnyMsgExecuteContract(msg) && (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { LaunchpadClient, StargateClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nconst { nodeUrls, stargateEnabled } = settings.backend;\nconst { MsgStoreCode, MsgInstantiateContract, MsgExecuteContract } = codec.cosmwasm.wasm.v1beta1;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = stargateEnabled ? await StargateClient.connect(nodeUrl) : new LaunchpadClient(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}