{"version":3,"sources":["contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","ui-utils/txs.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/VerifyContract.tsx","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","ui-utils/jsonInput.ts","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["dummyContext","nodeUrl","client","typeRegistry","Registry","resetClient","setSigningClient","ClientContext","React","createContext","devnetStargateSettings","nodeUrls","stargateEnabled","denominations","addressPrefix","gasPrice","GasPrice","fromString","devnetLaunchpadSettings","coralnetSettings","heldernetSettings","settings","backend","coralnet","heldernet","devnetLaunchpad","devnetStargate","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","aria-hidden","data-dismiss","aria-label","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","data-target","href","isStargateClient","StargateClient","isLaunchpadClient","LaunchpadClient","loadOrCreateMnemonic","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","toString","setItem","async","loadOrCreateWallet","mnemonic","hdPath","makeCosmoshubPath","Secp256k1HdWallet","fromMnemonic","loadLedgerWallet","ledgerTransport","TransportWebUSB","create","LedgerSigner","hdPaths","prefix","getSigningClient","loadWallet","signer","apiUrl","firstAddress","getAccounts","address","SigningCosmWasmClient","upload","init","exec","migrate","send","changeAdmin","createClient","disableLedgerLogin","anyNavigator","navigator","usb","Login","signingClient","loading","setLoading","error","setError","login","undefined","message","logout","isUserLoggedIn","senderAddress","disabled","UserAddress","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","printableBalance","balance","join","Tx","codec","cosmos","tx","v1beta1","SignMode","signing","PublicKey","tendermint","crypto","msgSendTypeUrl","isAnyMsgSend","msg","type_url","value","launchpadTxToStargateTx","stargateTx","body","messages","stargateMsg","isLaunchpadMsgSend","typeUrl","fromAddress","from_address","toAddress","to_address","isLaunchpadMsgStoreCode","sender","wasmByteCode","wasm_byte_code","source","builder","instantiatePermission","instantiate_permission","isLaunchpadMsgInstantiateContract","codeId","code_id","label","initMsg","init_msg","initFunds","init_funds","admin","isLaunchpadMsgExecuteContract","contract","sentFunds","sent_funds","Error","launchpadMsgToStargateMsg","memo","authInfo","signerInfos","signatures","pub_key","publicKey","ed25519","pubkeyType","fromBase64","secp256k1","finish","modeInfo","single","mode","SIGN_MODE_LEGACY_AMINO_JSON","sequence","Long","fromNumber","fee","gasLimit","gas","payer","granter","signature","AccountLink","maxLength","to","title","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","decodedTx","decode","i","decodedMsg","hash","getTransferFromStargateMsgSend","stargateEffect","getAccount","account","isMsgSend","getTransferFromLaunchpadMsgSend","launchpadEffect","pageTitle","aria-current","makeTags","oneLiner","split","pair","indexOf","parts","VerifyContract","checksum","verificationCmd","quote","CodeInfo","code","uploadTxHash","creator","ContractLink","InstanceRow","position","executionCount","setExecutionCount","tags","execTxs","InstancesEmptyState","CodePage","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","Codes","codes","setCodes","getCodes","codeInfos","processed","response","reverse","CodesPage","CodeLink","text","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","transfer","recipient","coinsPlaceholder","ExecuteContract","contractAddress","executing","setExecuting","setMemo","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","onChange","jsObject","event","target","executeResponseResult","execute","ExecutionsTable","HistoryInfo","contractCodeHistory","entry","operation","JSON","stringify","InitializationInfo","instantiationTxHash","queryPlaceholder","get_balance","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","isStargateMsgExecuteContract","getAndSetDetails","getContract","getAndSetContractCodeHistory","setContractCodeHistory","getContractCodeHistory","console","getAndSetInstantiationTxHash","setInstantiationTxHash","ContractPage","contractAddressParam","setExecutions","getExecutionFromStargateMsgExecuteContract","isMsgExecuteContract","getExecutionFromLaunchpadMsgExecuteContract","ExecutionInfo","success","MsgExecuteContract","MsgInstantiateContract","toNumber","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","wasm","MsgStoreCode","showAllCode","setShowAllCode","dataInfo","useMemo","Uint8Array","getFileType","ellideRight","toBase64","TxInfo","TxPage","txId","txIdParam","getTx","indexedTx","rawLog","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","process","cosmwasm","App","setNodeUrl","contextValue","setContextValue","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3e68433.chunk.js","sourcesContent":["import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\n\nimport { LaunchpadClient, StargateClient } from \"../ui-utils/clients\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: LaunchpadClient | StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n  readonly signingClient?: SigningCosmWasmClient;\n  readonly setSigningClient: (newSigningClient?: SigningCosmWasmClient) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry(),\n  resetClient: () => {},\n  setSigningClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","import { GasPrice } from \"@cosmjs/launchpad\";\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly stargateEnabled: boolean;\n  readonly denominations: readonly string[];\n  readonly addressPrefix: string;\n  readonly gasPrice: GasPrice;\n}\n\nconst devnetStargateSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:26659\"],\n  stargateEnabled: true,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"cosmos\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst devnetLaunchpadSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:1317\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"cosmos\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst coralnetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.coralnet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"coral\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst heldernetSettings: BackendSettings = {\n  nodeUrls: [\"https://lcd.heldernet.cosmwasm.com\"],\n  stargateEnabled: false,\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"cosmos\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\nconst knownBackends: { [index: string]: BackendSettings } = {\n  coralnet: coralnetSettings,\n  heldernet: heldernetSettings,\n  devnetLaunchpad: devnetLaunchpadSettings,\n  devnetStargate: devnetStargateSettings,\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"devnetLaunchpad\";\n  return knownBackends[id];\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\ninterface Props {}\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  CosmWasmClient as LaunchpadClient,\n  CosmWasmFeeTable,\n  SigningCosmWasmClient,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport { CosmWasmClient as StargateClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { GasLimits, makeCosmoshubPath, OfflineSigner, Secp256k1HdWallet } from \"@cosmjs/launchpad\";\nimport { LedgerSigner } from \"@cosmjs/launchpad-ledger\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\n\nimport { settings } from \"../settings\";\n\nexport { LaunchpadClient, StargateClient };\n\nexport function isStargateClient(client: LaunchpadClient | StargateClient | null): client is StargateClient {\n  return client instanceof StargateClient;\n}\n\nexport function isLaunchpadClient(\n  client: LaunchpadClient | StargateClient | null,\n): client is LaunchpadClient {\n  return client instanceof LaunchpadClient;\n}\n\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport type WalletLoader = (addressPrefix: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nexport async function createClient(signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const { gasPrice, nodeUrls } = settings.backend;\n  const apiUrl = nodeUrls[0];\n\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return new SigningCosmWasmClient(apiUrl, firstAddress, signer, gasPrice, gasLimits);\n}\n\nexport async function getSigningClient(loadWallet: WalletLoader): Promise<SigningCosmWasmClient> {\n  const signer = await loadWallet(settings.backend.addressPrefix);\n  const client = await createClient(signer);\n  return client;\n}\n\nexport function disableLedgerLogin(): any {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport {\n  disableLedgerLogin,\n  getSigningClient,\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  WalletLoader,\n} from \"../ui-utils/clients\";\n\nexport function Login(): JSX.Element {\n  const { signingClient, setSigningClient } = React.useContext(ClientContext);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  async function login(loadWallet: WalletLoader): Promise<void> {\n    setLoading(true);\n    setError(undefined);\n\n    try {\n      const client = await getSigningClient(loadWallet);\n      setSigningClient(client);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  function logout(): void {\n    setError(undefined);\n    setSigningClient(undefined);\n  }\n\n  function renderLoginButton(): JSX.Element {\n    return loading ? (\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n        Loading...\n      </button>\n    ) : (\n      <>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          disabled={settings.backend.stargateEnabled}\n        >\n          Login\n        </button>\n        <div className=\"dropdown-menu\">\n          <h6 className=\"dropdown-header\">with</h6>\n          <button className=\"dropdown-item\" onClick={() => login(loadOrCreateWallet)}>\n            Browser wallet\n          </button>\n          <button\n            className=\"dropdown-item\"\n            onClick={() => login(loadLedgerWallet)}\n            disabled={disableLedgerLogin()}\n          >\n            Ledger wallet\n          </button>\n        </div>\n      </>\n    );\n  }\n\n  function renderLogoutButton(): JSX.Element {\n    return (\n      <button className=\"btn btn-primary\" onClick={logout}>\n        Logout\n      </button>\n    );\n  }\n\n  const isUserLoggedIn = signingClient?.senderAddress;\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { signingClient } = React.useContext(ClientContext);\n\n  return signingClient?.senderAddress ? (\n    <div className=\"mr-3 p-2 rounded bg-white\">\n      <span>My address: </span>\n      <span>{signingClient.senderAddress}</span>\n    </div>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\n\nimport { Login } from \"./Login\";\nimport { UserAddress } from \"./UserAddress\";\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\n      <UserAddress />\n      <Login />\n    </header>\n  );\n}\n","import { Decimal } from \"@cosmjs/math\";\nimport { codec } from \"@cosmjs/stargate\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: ICoin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly ICoin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import {\n  isMsgExecuteContract as isLaunchpadMsgExecuteContract,\n  isMsgInstantiateContract as isLaunchpadMsgInstantiateContract,\n  isMsgStoreCode as isLaunchpadMsgStoreCode,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport { fromBase64 } from \"@cosmjs/encoding\";\nimport { isMsgSend as isLaunchpadMsgSend, Msg, pubkeyType, WrappedStdTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec } from \"@cosmjs/stargate\";\nimport Long from \"long\";\n\ntype IAny = codec.google.protobuf.IAny;\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\nconst { SignMode } = codec.cosmos.tx.signing.v1beta1;\nconst { PublicKey } = codec.tendermint.crypto;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly type_url: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.type_url === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgStoreCode\" && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgInstantiateContract\" && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.type_url === \"/cosmos.bank.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\n/* eslint-disable @typescript-eslint/camelcase */\nfunction launchpadMsgToStargateMsg(typeRegistry: Registry, msg: Msg): IAny {\n  if (isLaunchpadMsgSend(msg)) {\n    return {\n      type_url: msgSendTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgSendTypeUrl,\n        value: {\n          fromAddress: msg.value.from_address,\n          toAddress: msg.value.to_address,\n          amount: msg.value.amount,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgStoreCode(msg)) {\n    return {\n      type_url: msgStoreCodeTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgStoreCodeTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          wasmByteCode: msg.value.wasm_byte_code,\n          source: msg.value.source,\n          builder: msg.value.builder,\n          instantiatePermission: msg.value.instantiate_permission,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgInstantiateContract(msg)) {\n    return {\n      type_url: msgInstantiateContractTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgInstantiateContractTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          codeId: msg.value.code_id,\n          label: msg.value.label,\n          initMsg: msg.value.init_msg,\n          initFunds: msg.value.init_funds,\n          admin: msg.value.admin,\n        },\n      }),\n    };\n  }\n  if (isLaunchpadMsgExecuteContract(msg)) {\n    return {\n      type_url: msgExecuteContractTypeUrl,\n      value: typeRegistry.encode({\n        typeUrl: msgExecuteContractTypeUrl,\n        value: {\n          sender: msg.value.sender,\n          contract: msg.value.contract,\n          msg: msg.value.msg,\n          sentFunds: msg.value.sent_funds,\n        },\n      }),\n    };\n  }\n  throw new Error(\"msg type not recognised\");\n}\n\nexport function launchpadTxToStargateTx(typeRegistry: Registry, tx: WrappedStdTx): Uint8Array {\n  const stargateTx: ITx = {\n    body: {\n      messages: tx.value.msg.map((msg) => {\n        const stargateMsg = launchpadMsgToStargateMsg(typeRegistry, msg);\n        return {\n          typeUrl: stargateMsg.type_url ?? \"\",\n          value: stargateMsg.value,\n        };\n      }),\n      memo: tx.value.memo,\n    },\n    authInfo: {\n      signerInfos: tx.value.signatures.map(({ pub_key }) => ({\n        publicKey: {\n          type: \"/tendermint.crypto.PublicKey\",\n          value: PublicKey.encode(\n            PublicKey.create({\n              ed25519: pub_key.type === pubkeyType.ed25519 ? fromBase64(pub_key.value) : null,\n              secp256k1: pub_key.type === pubkeyType.secp256k1 ? fromBase64(pub_key.value) : null,\n            }),\n          ).finish(),\n        },\n        modeInfo: { single: { mode: SignMode.SIGN_MODE_LEGACY_AMINO_JSON } },\n        // TODO: Use real values\n        sequence: Long.fromNumber(0),\n      })),\n      fee: {\n        amount: [...tx.value.fee.amount],\n        gasLimit: Long.fromString(tx.value.fee.gas),\n        // TODO: Use real values\n        payer: undefined,\n        // TODO: Use real values\n        granter: undefined,\n      },\n    },\n    signatures: tx.value.signatures.map(({ signature }) => fromBase64(signature)),\n  };\n  return Tx.encode(Tx.create(stargateTx)).finish();\n}\n/* eslint-enable @typescript-eslint/camelcase */\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\ntype MsgSend = codec.cosmos.bank.v1beta1.MsgSend;\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Coin, IndexedTx as LaunchpadIndexedTx, isMsgSend, MsgSend } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getTransferFromLaunchpadMsgSend(tx: LaunchpadIndexedTx) {\n  return (msg: MsgSend, i: number): Transfer => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      fromAddress: msg.value.from_address,\n      toAddress: msg.value.to_address,\n      amount: [...msg.value.amount],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  address: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getAccount(address)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce(\n        (transfers: readonly Transfer[], tx: LaunchpadIndexedTx): readonly Transfer[] => {\n          const txTransfers = tx.tx.value.msg.filter(isMsgSend).map(getTransferFromLaunchpadMsgSend(tx));\n          return [...transfers, ...txTransfers];\n        },\n        [],\n      );\n      setTransfers(out);\n    })\n    .catch(() => setBalance(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  address: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setTransfers: (transfers: readonly Transfer[] | ErrorState | LoadingState) => void,\n) => (): void => {\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n  client\n    .searchTx({ sentFromOrTo: address })\n    .then((txs) => {\n      const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txTransfers = (decodedTx?.body?.messages ?? [])\n          .filter(isAnyMsgSend)\n          .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n        return [...transfers, ...txTransfers];\n      }, []);\n      setTransfers(out);\n    })\n    .catch(() => setTransfers(errorState));\n};\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, address, typeRegistry, setBalance, setTransfers)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, address, setBalance, setTransfers)\n      : () => {},\n    [address, client, typeRegistry],\n  );\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { CodeDetails } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\nimport VerifyContract from \"./VerifyContract\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n        <li className=\"list-group-item\">Source: {code.source || \"–\"}</li>\n        <li className=\"list-group-item\">Builder: {code.builder || \"–\"}</li>\n        <li className=\"list-group-item\">\n          <p className=\"text-muted\">\n            Code verification allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/CosmWasm/cosmwasm-verify\" className=\"text-muted\">\n              Tell me more!\n            </a>\n          </p>\n          <p className=\"mb-0\">\n            <VerifyContract checksum={code.checksum} source={code.source} builder={code.builder} />\n          </p>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n      .then((execTxs) => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [client, contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly Contract[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    (client?.searchTx({\n      tags: makeTags(`message.module=wasm&message.action=store-code&message.code_id=${codeId}`),\n    }) as Promise<ReadonlyArray<{ readonly hash: string }>>).then((results) => {\n      const first = results.find(() => true);\n      setUploadTxHash(first?.hash);\n    });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((contract, index) => (\n                    <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Source: {ellideMiddle(data.source, 42) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getCodes()\n      .then((codeInfos) => {\n        const processed = codeInfos\n          .map(\n            (response): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: response.id,\n                checksum: response.checksum,\n                creator: response.creator,\n                source: response.source || \"\",\n                builder: response.builder || \"\",\n              },\n            }),\n          )\n          .reverse();\n        setCodes(processed);\n      })\n      .catch(() => setCodes(errorState));\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","// Place error box below text box, so appearing error does not push text box down\nexport const jsonInputStyle = {\n  container: { display: \"flex\", flexDirection: \"column\" },\n  body: { order: \"1\" },\n  warningBox: { order: \"2\" },\n};\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-launchpad\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  transfer: { recipient: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\", amount: \"1\" },\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\n  const { signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: ExecuteResult = await signingClient.execute(\n        contractAddress,\n        msgObject.result,\n        memo,\n        coinsObject?.result,\n      );\n\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Execute contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Memo:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={memo}\n            onChange={(event) => setMemo(event.target.value)}\n          />\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Execute contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The contract formatted input\">Response:</span>\n            <pre className=\"mb-0\">{executeResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\ntype MsgExecuteContract = codec.cosmwasm.wasm.v1beta1.MsgExecuteContract;\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <pre className=\"mb-0\">{JSON.stringify(entry.msg, null, \"  \")}</pre>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-launchpad\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\n// eslint-disable-next-line @typescript-eslint/camelcase\nconst queryPlaceholder = { get_balance: { address: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\" } };\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    setQueryObject({ result: queryPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={queryPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport {\n  Contract,\n  ContractCodeHistoryEntry,\n  isMsgExecuteContract,\n  MsgExecuteContract,\n} from \"@cosmjs/cosmwasm-launchpad\";\nimport { Coin, IndexedTx as LaunchpadIndexedTx } from \"@cosmjs/launchpad\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { ExecuteContract } from \"./ExecuteContract\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype ICoin = codec.cosmos.base.v1beta1.ICoin;\ntype IAny = codec.google.protobuf.IAny;\n\ntype IAnyMsgExecuteContract = {\n  readonly type_url: \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nfunction isStargateMsgExecuteContract(msg: IAny): msg is IAnyMsgExecuteContract {\n  return msg.type_url === \"/cosmwasm.wasm.v1beta1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: LaunchpadClient | StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  (client.searchTx({\n    tags: makeTags(\n      `message.module=wasm&message.action=instantiate&message.contract_address=${contractAddress}`,\n    ),\n  }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nfunction getExecutionFromLaunchpadMsgExecuteContract(tx: LaunchpadIndexedTx) {\n  return (msg: MsgExecuteContract, i: number): Execution => ({\n    key: `${tx.hash}_${i}`,\n    height: tx.height,\n    transactionId: tx.hash,\n    msg: {\n      sender: msg.value.sender,\n      contract: msg.value.contract,\n      msg: msg.value.msg,\n      sentFunds: [...msg.value.sent_funds],\n    },\n  });\n}\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  contractAddress: string,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  client\n    .getAccount(contractAddress)\n    .then((account) => setBalance(account?.balance ?? []))\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce(\n        (executions: readonly Execution[], tx: LaunchpadIndexedTx): readonly Execution[] => {\n          const txExecutions = tx.tx.value.msg\n            .filter(isMsgExecuteContract)\n            .map(getExecutionFromLaunchpadMsgExecuteContract(tx));\n          return [...executions, ...txExecutions];\n        },\n        [],\n      );\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  contractAddress: string,\n  typeRegistry: Registry,\n  setBalance: (balance: readonly ICoin[] | ErrorState | LoadingState) => void,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n  setExecutions: (executions: readonly Execution[] | ErrorState | LoadingState) => void,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n) => () => {\n  getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n  getAndSetDetails(client, contractAddress, setDetails);\n  getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n  Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n    .then((balances) => {\n      const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n      setBalance(filteredBalances);\n    })\n    .catch(() => setBalance(errorState));\n\n  client\n    .searchTx({\n      tags: makeTags(`message.contract_address=${contractAddress}&message.action=execute`),\n    })\n    .then((txs) => {\n      const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n        const decodedTx = Tx.decode(tx.tx);\n        const txExecutions = (decodedTx?.body?.messages ?? [])\n          .filter(isStargateMsgExecuteContract)\n          .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n        return [...executions, ...txExecutions];\n      }, []);\n      setExecutions(out);\n    })\n    .catch(() => setExecutions(errorState));\n};\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(\n          client,\n          contractAddress,\n          typeRegistry,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : isLaunchpadClient(client)\n      ? launchpadEffect(\n          client,\n          contractAddress,\n          setBalance,\n          setContractCodeHistory,\n          setDetails,\n          setExecutions,\n          setInstantiationTxHash,\n        )\n      : () => {},\n    [client, contractAddress, typeRegistry],\n  );\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n                <ExecuteContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","// import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n}\n\nexport function ExecutionInfo({ tx }: Props): JSX.Element {\n  // const time = fromRfc3339(tx.timestamp);\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">Height: {tx.height}</li>\n      {/* <li className=\"list-group-item\">\n        <span title={tx.timestamp}>Time: {time.toLocaleString()}</span>\n      </li> */}\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgExecuteContract = codec.cosmwasm.wasm.v1beta1.IMsgExecuteContract;\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.sentFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.msg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgInstantiateContract = codec.cosmwasm.wasm.v1beta1.IMsgInstantiateContract;\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">Label: {msg.label}</li>\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.initFunds ?? [])}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Init message</span>:{\" \"}\n        <pre className=\"mb-0\">{JSON.stringify(msg.initMsg, null, \"  \")}</pre>\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ntype IMsgSend = codec.cosmos.bank.v1beta1.IMsgSend;\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ntype IMsgStoreCode = codec.cosmwasm.wasm.v1beta1.IMsgStoreCode;\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\n      <li className=\"list-group-item\">\n        Data: {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { codec } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ntype ITx = codec.cosmos.tx.v1beta1.ITx;\n\ninterface Props {\n  readonly tx: ITx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { codec, IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport { isLaunchpadClient, isStargateClient, LaunchpadClient, StargateClient } from \"../../ui-utils/clients\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n  launchpadTxToStargateTx,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nconst { Tx } = codec.cosmos.tx.v1beta1;\n\nconst launchpadEffect = (\n  client: LaunchpadClient,\n  txId: string,\n  typeRegistry: Registry,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      const indexedTx = tx\n        ? {\n            height: tx.height,\n            hash: tx.hash,\n            code: tx.code,\n            rawLog: tx.rawLog,\n            tx: launchpadTxToStargateTx(typeRegistry, tx.tx),\n          }\n        : undefined;\n      setDetails(indexedTx);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nconst stargateEffect = (\n  client: StargateClient,\n  txId: string,\n  setDetails: (details: IndexedTx | undefined | ErrorState | LoadingState) => void,\n) => (): void => {\n  client\n    .getTx(txId)\n    .then((tx) => {\n      setDetails(tx || undefined);\n    })\n    .catch(() => setDetails(errorState));\n};\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(\n    isStargateClient(client)\n      ? stargateEffect(client, txId, setDetails)\n      : isLaunchpadClient(client)\n      ? launchpadEffect(client, txId, typeRegistry, setDetails)\n      : () => {},\n    [client, txId, typeRegistry],\n  );\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo tx={details} />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg, index) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    Message {index + 1} (Type: {msg.type_url || <em>unset</em>})\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.type_url, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-launchpad\";\nimport { codec } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { LaunchpadClient, StargateClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nconst { nodeUrls, stargateEnabled } = settings.backend;\nconst { MsgStoreCode, MsgInstantiateContract, MsgExecuteContract } = codec.cosmwasm.wasm.v1beta1;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [signingClient, setSigningClient] = React.useState<SigningCosmWasmClient>();\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n    signingClient: signingClient,\n    setSigningClient: setSigningClient,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = stargateEnabled ? await StargateClient.connect(nodeUrl) : new LaunchpadClient(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\n  }, [signingClient]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}