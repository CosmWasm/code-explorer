{"version":3,"sources":["components/FooterRow.tsx","components/Header.tsx","settings.ts","pages/code/InstanceRow.tsx","pages/code/VerifyContract.tsx","ui-utils/index.ts","pages/codes/Code.tsx","pages/codes/Codes.tsx","components/CodeLink.tsx","pages/contract/ExecutionsTable.tsx","index.tsx","components/FlexibleRouter.tsx","pages/codes/CodesPage.tsx","pages/code/CodePage.tsx","pages/contract/ContractPage.tsx","pages/tx/TxPage.tsx"],"names":["separatorStyle","borderColor","whiteText","color","FooterRow","backend","chainId","setChainId","React","useState","useEffect","CosmWasmClient","nodeUrl","then","className","style","href","Header","settings","deployment","routerType","InstanceRow","position","contract","executionCount","setExecutionCount","client","tags","key","value","address","searchTx","execTxs","length","scope","label","to","creator","undefined","VerifyContract","checksum","source","builder","verificationCmd","quote","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","map","join","Code","data","instantiationInfo","setInstantiationInfo","getContracts","codeId","contracts","instantiations","Codes","codes","setCodes","getCodes","codeInfos","processed","response","id","reverse","code","CodeLink","ExecutionsTable","executions","execution","index","height","transactionId","title","msg","sender","ReactDOM","render","type","children","basename","process","exact","path","component","aria-label","aria-current","codeIdParam","useParams","parseInt","details","setDetails","setContracts","getCodeDetails","pageTitle","round","contractAddress","contractAddressParam","account","setAccount","setExecutions","getContract","getAccount","out","Array","tx","entries","types","isMsgExecuteContract","push","hash","JSON","stringify","initMsg","txId","txIdParam","results","firstResult","find","timestamp","signatures","sent_funds","document","getElementById"],"mappings":"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","file":"static/js/main.ba87de27.chunk.js","sourcesContent":["import { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { BackendSettings } from \"../settings\";\n\ninterface Props {\n  readonly backend: BackendSettings;\n}\n\nconst separatorStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\n/** Place me as a row in a container */\nexport function FooterRow({ backend }: Props): JSX.Element {\n  const [chainId, setChainId] = React.useState<string | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(backend.nodeUrl);\n    client.chainId().then(setChainId);\n  }, [backend.nodeUrl]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={separatorStyle} />\n        <p style={whiteText} className=\"text-center font-weight-light\">\n          Connected to endpoint {backend.nodeUrl} ({chainId || \"Loading …\"}) |{\" \"}\n          <a href=\"https://github.com/confio/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Header(): JSX.Element {\n  return <header>{/* This is where your logo and stuff goes */}</header>;\n}\n","export interface BackendSettings {\n  readonly nodeUrl: string;\n}\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst demonetSettings: BackendSettings = {\n  nodeUrl: \"https://lcd.demo-07.cosmwasm.com\",\n};\n\nconst devnetSettings: BackendSettings = {\n  nodeUrl: \"http://localhost:1317\",\n};\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nexport const settings: Settings = {\n  backend: process.env.NODE_ENV === \"development\" ? devnetSettings : demonetSettings,\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../../settings\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const [executionCount, setExecutionCount] = React.useState<number | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => setExecutionCount(execTxs.length));\n  }, [contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <Link to={`/contracts/${contract.address}`}>{contract.address}</Link>\n      </td>\n      <td>{contract.creator}</td>\n      <td>{executionCount === undefined ? \"Loading …\" : executionCount}</td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import { types } from \"@cosmwasm/sdk\";\nimport { Decimal } from \"@iov/encoding\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: types.Coin): string {\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly types.Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import \"./Code.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../../settings\";\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data }: Props): JSX.Element {\n  const [instantiationInfo, setInstantiationInfo] = React.useState<InstantiationInfo | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContracts(data.codeId).then(contracts => {\n      setInstantiationInfo({\n        instantiations: contracts.length,\n      });\n    });\n  }, [data.codeId]);\n\n  return (\n    <div className=\"p-2 flex-grow-1\">\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {data.creator}\n          <br />\n          Source: {ellideMiddle(data.source, 45) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances: {instantiationInfo ? instantiationInfo.instantiations : \"Loading …\"}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { settings } from \"../../settings\";\nimport { Code, CodeData } from \"./Code\";\n\nexport function Codes(): JSX.Element {\n  const [codes, setCodes] = React.useState<readonly CodeData[] | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getCodes().then(codeInfos => {\n      const processed = codeInfos\n        .map(\n          (response): CodeData => ({\n            codeId: response.id,\n            checksum: response.checksum,\n            creator: response.creator,\n            source: response.source || \"\",\n            builder: response.builder || \"\",\n          }),\n        )\n        .reverse();\n      setCodes(processed);\n    });\n  }, []);\n\n  return (\n    <div className=\"d-flex flex-wrap mb-3\">\n      {codes === \"loading\" ? (\n        <p>Loading …</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map(code => <Code data={code} key={code.codeId} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport default function CodeLink({ codeId }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>Code #{codeId}</Link>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/tx/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>{execution.msg.value.sender}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { FlexibleRouter } from \"./components/FlexibleRouter\";\nimport { CodePage } from \"./pages/code/CodePage\";\nimport { CodesPage } from \"./pages/codes/CodesPage\";\nimport { ContractPage } from \"./pages/contract/ContractPage\";\nimport { TxPage } from \"./pages/tx/TxPage\";\nimport { settings } from \"./settings\";\n\nReactDOM.render(\n  <FlexibleRouter type={settings.deployment.routerType}>\n    <Switch>\n      <Route exact path=\"/codes\" component={CodesPage} />\n      <Route path=\"/codes/:codeId\" component={CodePage} />\n      <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n      <Route path=\"/tx/:txId\" component={TxPage} />\n      <Route component={() => <Redirect to=\"/codes\" />} />\n    </Switch>\n  </FlexibleRouter>,\n  document.getElementById(\"root\"),\n);\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { settings } from \"../../settings\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow backend={settings.backend} />\n      </div>\n    </div>\n  );\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { settings } from \"../../settings\";\nimport InstanceRow from \"./InstanceRow\";\nimport VerifyContract from \"./VerifyContract\";\n\nexport function CodePage(): JSX.Element {\n  const { codeId: codeIdParam } = useParams();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | undefined>();\n  const [contracts, setContracts] = React.useState<readonly Contract[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContracts(codeId).then(setContracts);\n    client.getCodeDetails(codeId).then(setDetails);\n  }, [codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size: {details ? Math.round(details.data.length / 1024) + \" KiB\" : \"Loading …\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            <h2>Verification</h2>\n            <p>\n              Code verfication allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n              <a href=\"https://github.com/confio/cosmwasm-verify\">Tell me more!</a>\n            </p>\n            <p>\n              {details ? (\n                <VerifyContract\n                  checksum={details.checksum}\n                  source={details.source}\n                  builder={details.builder}\n                />\n              ) : (\n                <span>Loading …</span>\n              )}\n            </p>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">#</th>\n                  <th scope=\"col\">Label</th>\n                  <th scope=\"col\">Contract</th>\n                  <th scope=\"col\">Creator</th>\n                  <th scope=\"col\">Executions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {contracts.map((contract, index) => (\n                  <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <FooterRow backend={settings.backend} />\n      </div>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Account, ContractDetails, CosmWasmClient, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport CodeLink from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\n\nexport function ContractPage(): JSX.Element {\n  const { contractAddress: contractAddressParam } = useParams();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<ContractDetails | undefined>();\n  const [account, setAccount] = React.useState<Account | undefined>();\n  const [executions, setExecutions] = React.useState<readonly Execution[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContract(contractAddress).then(setDetails);\n    client.getAccount(contractAddress).then(setAccount);\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contractAddress,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => {\n      const out = new Array<Execution>();\n      for (const tx of execTxs) {\n        for (const [index, msg] of tx.tx.value.msg.entries()) {\n          if (types.isMsgExecuteContract(msg)) {\n            out.push({\n              key: `${tx.hash}_${index}`,\n              height: tx.height,\n              transactionId: tx.hash,\n              msg: msg,\n            });\n          } else {\n            // skip\n          }\n        }\n      }\n      setExecutions(out);\n    });\n  }, [contractAddress]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {details ? <CodeLink codeId={details.codeId} /> : <span>Loading …</span>}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance: {printableBalance(account?.balance || [])}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            <h2>Init message</h2>\n            <pre>\n              <code>{details ? JSON.stringify(details.initMsg, null, 2) : \"Loading …\"}</code>\n            </pre>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow backend={settings.backend} />\n      </div>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { CosmWasmClient, IndexedTx, types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\n\nexport function TxPage(): JSX.Element {\n  const { txId: txIdParam } = useParams();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.searchTx({ id: txId }).then(results => {\n      const firstResult = results.find(() => true);\n      setDetails(firstResult);\n    });\n  }, [txId]);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">\n                Height: {details === \"loading\" ? \"Loading...\" : details?.height || \"–\"}\n              </li>\n              <li className=\"list-group-item\">\n                Time: {details === \"loading\" ? \"Loading...\" : details?.timestamp || \"–\"}\n              </li>\n              <li className=\"list-group-item\">\n                Signatures:{\" \"}\n                {details === \"loading\" ? \"Loading...\" : details?.tx.value.signatures.length || \"–\"}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {details === \"loading\" ? (\n              <p>Loading …</p>\n            ) : (\n              <div>\n                {details ? (\n                  details.tx.value.msg.map((msg, index) => (\n                    <div className=\"card\" key={`${details.hash}_${index}`}>\n                      <div className=\"card-header\">Type: {msg.type}</div>\n                      <ul className=\"list-group list-group-flush\">\n                        {types.isMsgExecuteContract(msg) && (\n                          <Fragment>\n                            <li className=\"list-group-item\">\n                              Contract:{\" \"}\n                              <Link to={`/contracts/${msg.value.contract}`}>{msg.value.contract}</Link>\n                            </li>\n                            <li className=\"list-group-item\">Sender: {msg.value.sender}</li>\n                            <li className=\"list-group-item\">\n                              Sent funds: {printableBalance(msg.value.sent_funds)}\n                            </li>\n                            <li className=\"list-group-item\">\n                              <span title=\"The contract level message\">Handle message</span>:{\" \"}\n                              <pre className=\"mb-0\">{JSON.stringify(msg.value.msg, null, \"  \")}</pre>\n                            </li>\n                          </Fragment>\n                        )}\n                      </ul>\n                    </div>\n                  ))\n                ) : (\n                  <p>Transaction not found</p>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <FooterRow backend={settings.backend} />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}