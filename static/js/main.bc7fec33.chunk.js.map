{"version":3,"sources":["ui-utils/txs.ts","contexts/ClientContext.tsx","settings/backend.ts","settings/index.ts","ui-utils/states.ts","components/EndpointSelector.tsx","components/NodeInfoModal.tsx","components/FooterRow.tsx","ui-utils/clients.ts","components/Login.tsx","components/UserAddress.tsx","components/Header.tsx","ui-utils/index.ts","components/AccountLink.tsx","components/TransactionLink.tsx","pages/account/TransfersTable.tsx","pages/account/AccountPage.tsx","ui-utils/sdkhelpers.ts","pages/code/CodeInfo.tsx","components/ContractLink.tsx","pages/code/InstanceRow.tsx","pages/code/InstancesEmptyState.tsx","pages/code/CodePage.tsx","pages/codes/Code.tsx","pages/codes/Codes.tsx","pages/codes/CodesPage.tsx","components/CodeLink.tsx","ui-utils/jsonInput.ts","pages/contract/ExecuteContract.tsx","pages/contract/ExecutionsTable.tsx","pages/contract/HistoryInfo.tsx","pages/contract/InitializationInfo.tsx","pages/contract/QueryContract.tsx","pages/contract/ContractPage.tsx","pages/tx/ExecutionInfo.tsx","pages/tx/msgs/MsgExecuteContract.tsx","pages/tx/msgs/MsgInstantiateContract.tsx","pages/tx/msgs/MsgSend.tsx","pages/tx/msgs/magic.ts","pages/tx/msgs/MsgStoreCode.tsx","pages/tx/TxInfo.tsx","pages/tx/TxPage.tsx","components/FlexibleRouter.tsx","components/App.tsx","index.tsx"],"names":["msgStoreCodeTypeUrl","msgInstantiateContractTypeUrl","msgExecuteContractTypeUrl","isAnyMsgSend","msg","typeUrl","value","dummyContext","nodeUrl","client","typeRegistry","Registry","MsgStoreCode","MsgInstantiateContract","MsgExecuteContract","resetClient","setUserAddress","setSigningClient","ClientContext","React","createContext","knownBackends","devnet","nodeUrls","denominations","addressPrefix","gasPrice","GasPrice","fromString","sandynet","settings","backend","id","process","Error","getCurrentBackend","deployment","routerType","runtimeCodes","isErrorState","state","isNonNullObject","type","isLoadingState","errorState","loadingState","EndpointSelector","urls","currentUrl","urlChanged","length","className","map","url","key","onClick","NodeInfoModal","htmlId","chainId","height","clientContext","useContext","tabIndex","role","hrStyle","borderColor","whiteText","color","Separator","FooterRow","setChainId","useState","setHeight","updateHeight","useCallback","getHeight","then","catch","useEffect","getChainId","style","newUrl","href","loadOrCreateMnemonic","mnemonic","loaded","localStorage","getItem","loadedMnemonic","Bip39","encode","Random","getBytes","toString","setItem","loadKeplrWallet","keplrChainInfo","async","chaindId","w","window","getOfflineSigner","keplr","experimentalSuggestChain","registerKeplrChain","enable","loadOrCreateWalletDirect","hdPath","makeCosmoshubPath","DirectSecp256k1HdWallet","fromMnemonic","hdPaths","prefix","loadLedgerWallet","interactiveTimeout","ledgerTransport","TransportWebUSB","create","LedgerSigner","getAddressAndStargateSigningClient","loadWallet","signer","userAddress","getAccounts","address","signingClient","endpoint","StargateSigningClient","connectWithSigner","registry","createStargateSigningClient","webUsbMissing","anyNavigator","navigator","usb","Login","setMnemonic","loading","setLoading","error","setError","loginStargate","undefined","message","logout","isUserLoggedIn","keplrButton","disabled","title","onChange","event","target","renderLoginButton","UserAddress","Header","ellideMiddle","str","maxOutLen","frontLen","Math","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","printableBalance","balance","join","parseMsgContract","json","fromUtf8","JSON","parse","AccountLink","maxLength","to","TransactionLink","transactionId","TransfersTable","transfers","executions","scope","execution","index","fromAddress","toAddress","AccountPage","addressParam","useParams","setBalance","setTransfers","Promise","all","getBalance","balances","filteredBalances","filter","searchTx","sentFromOrTo","txs","out","reduce","tx","decodedTx","Tx","decode","txTransfers","body","messages","i","decodedMsg","hash","getTransferFromStargateMsgSend","pageTitle","makeTags","oneLiner","split","pair","indexOf","parts","CodeInfo","code","uploadTxHash","creator","checksum","ContractLink","InstanceRow","position","executionCount","setExecutionCount","contract","setContractInfo","getContract","execTxs","tags","label","admin","InstancesEmptyState","CodePage","codeId","codeIdParam","parseInt","details","setDetails","contracts","setContracts","setUploadTxHash","getContracts","getCodeDetails","results","first","find","round","data","Code","instantiationInfo","setInstantiationInfo","instantiations","codeKey","source","Codes","codes","setCodes","queryClient","forceGetQueryClient","startAtKey","response","wasm","listCodeInfo","codeInfos","pagination","loadedCodes","entry","toNumber","toHex","dataHash","reverse","unshift","nextKey","_e","CodesPage","CodeLink","text","jsonInputStyle","container","display","flexDirection","order","warningBox","executePlaceholder","transfer","recipient","coinsPlaceholder","ExecuteContract","contractAddress","executing","setExecuting","memo","setMemo","msgObject","setMsgObject","coinsObject","setCoinsObject","executeResponse","setExecuteResponse","result","width","placeholder","confirmGood","jsObject","executeResponseResult","execute","calculateFee","stringify","ExecutionsTable","sender","HistoryInfo","contractCodeHistory","operation","src","InitializationInfo","instantiationTxHash","queryPlaceholder","get_balance","QueryContract","queryObject","setQueryObject","queryResponse","setQueryResponse","cursor","queryResponseResult","queryContractSmart","formattedResult","isStargateMsgExecuteContract","ContractPage","contractAddressParam","setInstantiationTxHash","setContractCodeHistory","setExecutions","getContractCodeHistory","console","getAndSetContractCodeHistory","getAndSetDetails","getAndSetInstantiationTxHash","txExecutions","getExecutionFromStargateMsgExecuteContract","ExecutionInfo","timestamp","time","fromRfc3339","success","toLocaleString","funds","MsgSend","arrayStartsWith","a","b","some","byte","arrayEqual","magic","gzip","fromHex","showAllCode","setShowAllCode","dataInfo","useMemo","wasmByteCode","Uint8Array","getFileType","builder","ellideRight","toBase64","TxInfo","authInfo","fee","gasLimit","signatures","TxPage","txId","txIdParam","block","setBlockInfo","getTx","getBlock","header","isAnyMsgStoreCode","isAnyMsgInstantiateContract","isAnyMsgExecuteContract","FlexibleRouter","children","basename","App","setNodeUrl","contextValue","setContextValue","StargateClient","connect","prevContextValue","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc7fec33.chunk.js","sourcesContent":["import { Any } from \"cosmjs-types/google/protobuf/any\";\n\ntype IAny = Any;\n\nexport const msgSendTypeUrl = \"/cosmos.bank.v1beta1.MsgSend\";\nexport const msgStoreCodeTypeUrl = \"/cosmwasm.wasm.v1.MsgStoreCode\";\nexport const msgInstantiateContractTypeUrl = \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\nexport const msgExecuteContractTypeUrl = \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n\nexport interface AnyMsgSend {\n  readonly typeUrl: \"/cosmos.bank.v1beta1.MsgSend\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgStoreCode {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgInstantiateContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\";\n  readonly value: Uint8Array;\n}\n\nexport interface AnyMsgExecuteContract {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n}\n\nexport function isAnyMsgSend(msg: IAny): msg is AnyMsgSend {\n  return msg.typeUrl === msgSendTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgStoreCode(msg: IAny): msg is AnyMsgStoreCode {\n  return msg.typeUrl === msgStoreCodeTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgInstantiateContract(msg: IAny): msg is AnyMsgInstantiateContract {\n  return msg.typeUrl === msgInstantiateContractTypeUrl && !!msg.value;\n}\n\nexport function isAnyMsgExecuteContract(msg: IAny): msg is AnyMsgExecuteContract {\n  return msg.typeUrl === msgExecuteContractTypeUrl && !!msg.value;\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\n\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\n\nexport interface ClientContextValue {\n  readonly nodeUrl: string;\n  readonly client: StargateClient | null;\n  readonly typeRegistry: Registry;\n  readonly resetClient: (nodeUrl: string) => void;\n  readonly userAddress?: string;\n  readonly setUserAddress: (newUserAddress?: string) => void;\n  readonly signingClient?: StargateSigningClient;\n  readonly setSigningClient: (newSigningClient?: StargateSigningClient) => void;\n}\n\n/**\n * \"only used when a component does not have a matching Provider above it in the tree\"\n *\n * @see https://reactjs.org/docs/context.html#reactcreatecontext\n */\nconst dummyContext: ClientContextValue = {\n  nodeUrl: \"\",\n  client: null,\n  typeRegistry: new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]),\n  resetClient: () => {},\n  setUserAddress: () => {},\n  setSigningClient: () => {},\n};\n\nexport const ClientContext = React.createContext<ClientContextValue>(dummyContext);\n","import { GasPrice } from \"@cosmjs/stargate\";\n\nexport type NonEmptyArray<ElementType> = { readonly 0: ElementType } & readonly ElementType[];\n\nexport interface BackendSettings {\n  readonly nodeUrls: NonEmptyArray<string>;\n  readonly denominations: readonly string[];\n  readonly addressPrefix: string;\n  readonly gasPrice: GasPrice;\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  readonly keplrChainInfo?: any;\n}\n\n// Configuration matches local devnet as defined in\n// https://github.com/cosmos/cosmjs/tree/main/scripts/wasmd\nconst devnetSettings: BackendSettings = {\n  nodeUrls: [\"http://localhost:26659\"],\n  denominations: [\"ucosm\", \"ustake\"],\n  addressPrefix: \"wasm\",\n  gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n};\n\n// const oysternetSettings: BackendSettings = {\n//   nodeUrls: [\"http://rpc.oysternet.cosmwasm.com\"],\n//   denominations: [\"usponge\"],\n//   addressPrefix: \"wasm\",\n//   gasPrice: GasPrice.fromString(\"0.25ucosm\"),\n//   keplrChainInfo: {\n//     rpc: \"http://rpc.oysternet.cosmwasm.com\",\n//     rest: \"http://lcd.oysternet.cosmwasm.com\",\n//     chainId: \"oysternet-1\",\n//     chainName: \"Wasm Oysternet\",\n//     stakeCurrency: {\n//       coinDenom: \"SPONGE\",\n//       coinMinimalDenom: \"usponge\",\n//       coinDecimals: 6,\n//     },\n//     bip44: {\n//       coinType: 118,\n//     },\n//     bech32Config: {\n//       bech32PrefixAccAddr: \"wasm\",\n//       bech32PrefixAccPub: \"wasmpub\",\n//       bech32PrefixValAddr: \"wasmvaloper\",\n//       bech32PrefixValPub: \"wasmvaloperpub\",\n//       bech32PrefixConsAddr: \"wasmvalcons\",\n//       bech32PrefixConsPub: \"wasmvalconspub\",\n//     },\n//     currencies: [\n//       {\n//         coinDenom: \"SPONGE\",\n//         coinMinimalDenom: \"usponge\",\n//         coinDecimals: 6,\n//       },\n//     ],\n//     feeCurrencies: [\n//       {\n//         coinDenom: \"SPONGE\",\n//         coinMinimalDenom: \"usponge\",\n//         coinDecimals: 6,\n//       },\n//     ],\n//     features: [\"stargate\"],\n//   },\n// };\n\nconst knownBackends: Partial<Record<string, BackendSettings>> = {\n  devnet: devnetSettings,\n  sandynet: {\n    nodeUrls: [\"https://rpc.sandynet.cosmwasm.com\"],\n    denominations: [\"ubay\", \"umaya\"],\n    addressPrefix: \"wasm\",\n    gasPrice: GasPrice.fromString(\"0.25ubay\"),\n  },\n};\n\nexport function getCurrentBackend(): BackendSettings {\n  const id = process.env.REACT_APP_BACKEND || \"devnet\";\n  const backend = knownBackends[id];\n  if (!backend) {\n    throw new Error(`No backend found for the given ID \"${id}\"`);\n  }\n  return backend;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { BackendSettings, getCurrentBackend } from \"./backend\";\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nconst firebaseHosting: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nexport const settings: Settings = {\n  backend: getCurrentBackend(),\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { isNonNullObject } from \"@cosmjs/utils\";\n\nconst runtimeCodes = {\n  error: \"_\\u2588_ErrorState_\\u2588_\" as const,\n  loading: \"_\\u2588_LoadingState_\\u2588_\" as const,\n};\n\nexport interface ErrorState {\n  readonly type: typeof runtimeCodes.error;\n}\n\nexport interface LoadingState {\n  readonly type: typeof runtimeCodes.loading;\n}\n\nexport function isErrorState(state: unknown): state is ErrorState {\n  if (!isNonNullObject(state)) return false;\n  return (state as ErrorState).type === runtimeCodes.error;\n}\n\nexport function isLoadingState(state: unknown): state is LoadingState {\n  if (!isNonNullObject(state)) return false;\n  return (state as LoadingState).type === runtimeCodes.loading;\n}\n\nexport const errorState: ErrorState = { type: runtimeCodes.error };\nexport const loadingState: LoadingState = { type: runtimeCodes.loading };\n","import React, { Fragment } from \"react\";\n\nimport { NonEmptyArray } from \"../settings/backend\";\n\ninterface Props {\n  readonly currentUrl: string;\n  readonly urls: NonEmptyArray<string>;\n  readonly urlChanged: (newUrl: string) => void;\n}\n\nexport function EndpointSelector({ urls, currentUrl, urlChanged }: Props): JSX.Element {\n  if (urls.length === 1) {\n    return <Fragment>{currentUrl}</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <button\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          type=\"button\"\n          id=\"dropdownMenuButton\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          {currentUrl}\n        </button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n          {urls.map((url) => (\n            <button\n              key={url}\n              className={`dropdown-item` + (url === currentUrl ? \" active\" : \"\")}\n              type=\"button\"\n              onClick={() => urlChanged(url)}\n            >\n              {url}\n            </button>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../ui-utils/states\";\n\ninterface Props {\n  readonly htmlId: string;\n  readonly chainId: string | ErrorState | LoadingState;\n  readonly height: number | ErrorState | LoadingState;\n}\n\nexport function NodeInfoModal({ htmlId, chainId, height }: Props): JSX.Element {\n  const clientContext = React.useContext(ClientContext);\n\n  return (\n    <div\n      className=\"modal fade\"\n      id={htmlId}\n      tabIndex={-1}\n      role=\"dialog\"\n      aria-labelledby=\"exampleModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div className=\"modal-dialog\" role=\"document\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Node info\n            </h5>\n            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n              <span aria-hidden=\"true\">&times;</span>\n            </button>\n          </div>\n          <div className=\"modal-body\">\n            Endpoint: {clientContext.nodeUrl}\n            <br />\n            Chain ID: {isLoadingState(chainId) ? \"Loading …\" : isErrorState(chainId) ? \"Error\" : chainId}\n            <br />\n            Height: {isLoadingState(height) ? \"Loading …\" : isErrorState(height) ? \"Error\" : height}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport { ErrorState, errorState, LoadingState, loadingState } from \"../ui-utils/states\";\nimport { EndpointSelector } from \"./EndpointSelector\";\nimport { NodeInfoModal } from \"./NodeInfoModal\";\n\nconst hrStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\nfunction Separator(): JSX.Element {\n  return <Fragment> | </Fragment>;\n}\n\n/** Place me as a row in a container */\nexport function FooterRow(): JSX.Element {\n  const { client, nodeUrl, resetClient } = React.useContext(ClientContext);\n\n  const [chainId, setChainId] = React.useState<string | ErrorState | LoadingState>(loadingState);\n  const [height, setHeight] = React.useState<number | ErrorState | LoadingState>(loadingState);\n\n  const updateHeight = React.useCallback(() => {\n    client\n      ?.getHeight()\n      .then(setHeight)\n      .catch(() => setHeight(errorState));\n  }, [client]);\n\n  React.useEffect(() => {\n    client\n      ?.getChainId()\n      .then(setChainId)\n      .catch(() => setChainId(errorState));\n    updateHeight();\n  }, [client, updateHeight]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={hrStyle} />\n        <NodeInfoModal htmlId=\"nodeInfoModal\" chainId={chainId} height={height} />\n        <div style={whiteText} className=\"dropdown text-center font-weight-light mb-3\">\n          Endpoint{\" \"}\n          <EndpointSelector\n            currentUrl={nodeUrl}\n            urls={settings.backend.nodeUrls}\n            urlChanged={(newUrl) => resetClient(newUrl)}\n          />{\" \"}\n          <button\n            type=\"button\"\n            className=\"btn btn-sm btn-secondary\"\n            data-toggle=\"modal\"\n            data-target=\"#nodeInfoModal\"\n            onClick={updateHeight}\n          >\n            Node info\n          </button>\n          <Separator />\n          <a href=\"https://github.com/CosmWasm/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { makeCosmoshubPath, OfflineAminoSigner } from \"@cosmjs/amino\";\nimport {\n  CosmWasmClient as StargateClient,\n  SigningCosmWasmClient as StargateSigningClient,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\nimport { DirectSecp256k1HdWallet, OfflineDirectSigner, OfflineSigner, Registry } from \"@cosmjs/proto-signing\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\n\nimport { settings } from \"../settings\";\nimport { msgExecuteContractTypeUrl, msgInstantiateContractTypeUrl, msgStoreCodeTypeUrl } from \"./txs\";\n\nexport { StargateClient, StargateSigningClient };\n\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\nexport function loadOrCreateMnemonic(mnemonic?: string): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded && !mnemonic) {\n    return loaded;\n  }\n  const loadedMnemonic = mnemonic || generateMnemonic();\n  localStorage.setItem(key, loadedMnemonic);\n  return loadedMnemonic;\n}\n\nexport type WalletLoaderDirect = (\n  addressPrefix: string,\n  mnemonic?: string,\n) => Promise<OfflineDirectSigner | OfflineAminoSigner>;\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function loadKeplrWallet(client: StargateClient, keplrChainInfo: any): WalletLoaderDirect {\n  return async () => {\n    const chaindId = await client.getChainId();\n\n    await registerKeplrChain(keplrChainInfo);\n    const w = window as any;\n    await w.keplr.enable(chaindId);\n\n    return w.getOfflineSigner(chaindId);\n  };\n}\n\nasync function registerKeplrChain(keplrChainInfo: any): Promise<void> {\n  const w = window as any;\n  if (!w.getOfflineSigner || !w.keplr) {\n    throw new Error(\"Please install keplr extension\");\n  }\n\n  if (!w.keplr.experimentalSuggestChain) {\n    throw new Error(\"Please use the recent version of keplr extension\");\n  }\n\n  try {\n    await w.keplr.experimentalSuggestChain(keplrChainInfo);\n  } catch {\n    throw new Error(\"Failed to suggest the chain\");\n  }\n}\n\nexport async function loadOrCreateWalletDirect(\n  addressPrefix: string,\n  mnemonic?: string,\n): Promise<OfflineDirectSigner> {\n  const loadedMnemonic = loadOrCreateMnemonic(mnemonic);\n  const hdPath = makeCosmoshubPath(0);\n  return DirectSecp256k1HdWallet.fromMnemonic(loadedMnemonic, {\n    hdPaths: [hdPath],\n    prefix: addressPrefix,\n  });\n}\n\nexport async function loadLedgerWallet(addressPrefix: string): Promise<OfflineAminoSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nasync function createStargateSigningClient(signer: OfflineSigner): Promise<StargateSigningClient> {\n  const { nodeUrls } = settings.backend;\n  const endpoint = nodeUrls[0];\n\n  const typeRegistry = new Registry([\n    [msgStoreCodeTypeUrl, MsgStoreCode],\n    [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n    [msgExecuteContractTypeUrl, MsgExecuteContract],\n  ]);\n\n  return StargateSigningClient.connectWithSigner(endpoint, signer, {\n    registry: typeRegistry,\n  });\n}\n\nexport async function getAddressAndStargateSigningClient(\n  loadWallet: WalletLoaderDirect,\n  mnemonic?: string,\n): Promise<[string, StargateSigningClient]> {\n  const signer = await loadWallet(settings.backend.addressPrefix, mnemonic);\n  const userAddress = (await signer.getAccounts())[0].address;\n  const signingClient = await createStargateSigningClient(signer);\n  return [userAddress, signingClient];\n}\n\nexport function webUsbMissing(): boolean {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\nimport { settings } from \"../settings\";\nimport {\n  getAddressAndStargateSigningClient,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  loadOrCreateWalletDirect,\n  WalletLoaderDirect,\n  webUsbMissing,\n} from \"../ui-utils/clients\";\n\nexport function Login(): JSX.Element {\n  const { userAddress, setUserAddress, setSigningClient, client } = React.useContext(ClientContext);\n  const [mnemonic, setMnemonic] = React.useState<string>();\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  async function loginStargate(loadWallet: WalletLoaderDirect): Promise<void> {\n    setLoading(true);\n    setError(undefined);\n\n    try {\n      const [userAddress, signingClient] = await getAddressAndStargateSigningClient(loadWallet, mnemonic);\n      setUserAddress(userAddress);\n      setSigningClient(signingClient);\n    } catch (error: any) {\n      setError(error.message);\n    }\n\n    setLoading(false);\n  }\n\n  function logout(): void {\n    setError(undefined);\n    setUserAddress(undefined);\n    setMnemonic(undefined);\n    setSigningClient(undefined);\n  }\n\n  function renderLoginButton(): JSX.Element {\n    const { keplrChainInfo } = settings.backend;\n\n    let keplrButton;\n    if (keplrChainInfo !== undefined && client !== null) {\n      keplrButton = (\n        <button\n          className=\"dropdown-item\"\n          onClick={async () => loginStargate(loadKeplrWallet(client, keplrChainInfo))}\n        >\n          Keplr wallet\n        </button>\n      );\n    }\n\n    return loading ? (\n      <button className=\"btn btn-primary\" type=\"button\" disabled>\n        <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n        Loading...\n      </button>\n    ) : (\n      <>\n        <div className=\"mr-3 p-2 rounded bg-white\">\n          <span title=\"Mnemonic for burner wallet\">Mnemonic:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={mnemonic}\n            onChange={(event) => setMnemonic(event.target.value)}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Login\n        </button>\n        <div className=\"dropdown-menu\">\n          <h6 className=\"dropdown-header\">with</h6>\n          <button className=\"dropdown-item\" onClick={() => loginStargate(loadOrCreateWalletDirect)}>\n            Browser wallet\n          </button>\n          {keplrButton}\n          <button\n            className=\"dropdown-item\"\n            onClick={() => loginStargate(loadLedgerWallet)}\n            disabled={webUsbMissing()}\n          >\n            Ledger wallet\n          </button>\n        </div>\n      </>\n    );\n  }\n\n  function renderLogoutButton(): JSX.Element {\n    return (\n      <button className=\"btn btn-primary\" onClick={logout}>\n        Logout\n      </button>\n    );\n  }\n\n  const isUserLoggedIn = !!userAddress;\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-end\">\n      {error ? <div className=\"mr-3 p-2 rounded bg-white text-danger\">{error}</div> : null}\n      {isUserLoggedIn ? renderLogoutButton() : renderLoginButton()}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { ClientContext } from \"../contexts/ClientContext\";\n\nexport function UserAddress(): JSX.Element {\n  const { userAddress } = React.useContext(ClientContext);\n\n  return userAddress ? (\n    <div className=\"mr-3 p-2 rounded bg-white\">\n      <span>My address: </span>\n      <span>{userAddress}</span>\n    </div>\n  ) : (\n    <></>\n  );\n}\n","import React from \"react\";\n\nimport { Login } from \"./Login\";\nimport { UserAddress } from \"./UserAddress\";\n\nexport function Header(): JSX.Element {\n  return (\n    <header className=\"mt-3 p-0 d-flex align-items-center justify-content-end container contract-container\">\n      <UserAddress />\n      <Login />\n    </header>\n  );\n}\n","import { fromUtf8 } from \"@cosmjs/encoding\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(str.length - tailLen, str.length);\n}\n\nexport function ellideRight(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = maxOutLen - ellide.length;\n  return str.slice(0, frontLen) + ellide;\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: Coin): string {\n  if (coin.denom?.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount ?? \"0\", 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function parseMsgContract(msg: Uint8Array): any {\n  const json = fromUtf8(msg);\n\n  return JSON.parse(json);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function AccountLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/accounts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly transactionId: string;\n  readonly maxLength?: number | null;\n}\n\nexport function TransactionLink({ transactionId, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/transactions/${transactionId}`} title={transactionId}>\n      {ellideMiddle(transactionId, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { MsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { printableBalance } from \"../../ui-utils\";\n\nexport interface Transfer {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgSend;\n}\n\ninterface Props {\n  readonly transfers: readonly Transfer[];\n}\n\nexport function TransfersTable({ transfers: executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n          <th scope=\"col\">Recipient</th>\n          <th scope=\"col\">Amount</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.fromAddress} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.toAddress} />\n            </td>\n            <td>{printableBalance(execution.msg.amount)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { AnyMsgSend, isAnyMsgSend } from \"../../ui-utils/txs\";\nimport { Transfer, TransfersTable } from \"./TransfersTable\";\n\ntype ICoin = Coin;\n\nfunction getTransferFromStargateMsgSend(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: AnyMsgSend, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nexport function AccountPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { address: addressParam } = useParams<{ readonly address: string }>();\n  const address = addressParam || \"\";\n\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [transfers, setTransfers] = React.useState<readonly Transfer[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    if (!client) return;\n\n    Promise.all(settings.backend.denominations.map((denom) => client.getBalance(address, denom)))\n      .then((balances) => {\n        const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n        setBalance(filteredBalances);\n      })\n      .catch(() => setBalance(errorState));\n    client\n      .searchTx({ sentFromOrTo: address })\n      .then((txs) => {\n        const out = txs.reduce((transfers: readonly Transfer[], tx: IndexedTx): readonly Transfer[] => {\n          const decodedTx = Tx.decode(tx.tx);\n          const txTransfers = (decodedTx?.body?.messages ?? [])\n            .filter(isAnyMsgSend)\n            .map(getTransferFromStargateMsgSend(typeRegistry, tx));\n          return [...transfers, ...txTransfers];\n        }, []);\n        setTransfers(out);\n      })\n      .catch(() => setTransfers(errorState));\n  }, [address, client, typeRegistry]);\n\n  const pageTitle = <span title={address}>Account {ellideMiddle(address, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Token transfers</h2>\n            <p>Incoming and outgoing bank token transfers</p>\n            {isLoadingState(transfers) ? (\n              <p>Loading …</p>\n            ) : isErrorState(transfers) ? (\n              <p>Error</p>\n            ) : transfers.length === 0 ? (\n              <p>No transfer found</p>\n            ) : (\n              <TransfersTable transfers={transfers} />\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","export interface Tag {\n  readonly key: string;\n  readonly value: string;\n}\n\nexport function makeTags(oneLiner: string): Tag[] {\n  return oneLiner.split(\"&\").map((pair) => {\n    if (pair.indexOf(\"=\") === -1) throw new Error(\"Parsing error: Equal sign missing\");\n    const parts = pair.split(\"=\");\n    if (parts.length > 2) {\n      throw new Error(\n        \"Parsing error: Multiple equal signs found. If you need escaping support, please create a PR.\",\n      );\n    }\n    const [key, value] = parts;\n    if (!key) throw new Error(\"Parsing error: Key must not be empty\");\n    return { key, value };\n  });\n}\n","import { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly code: CodeDetails;\n  readonly uploadTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function CodeInfo({ code, uploadTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Upload transaction:{\" \"}\n          {isLoadingState(uploadTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(uploadTxHash) ? (\n            \"Error\"\n          ) : uploadTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={uploadTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={code.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">Checksum: {code.checksum}</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../ui-utils\";\n\ninterface Props {\n  readonly address: string;\n  readonly maxLength?: number | null;\n}\n\nexport function ContractLink({ address, maxLength = 20 }: Props): JSX.Element {\n  return (\n    <Link to={`/contracts/${address}`} title={address}>\n      {ellideMiddle(address, maxLength || 99999)}\n    </Link>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { ContractLink } from \"../../components/ContractLink\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly position: number;\n  readonly address: string;\n}\n\nfunction InstanceRow({ position, address }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [executionCount, setExecutionCount] = React.useState<number | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [contract, setContractInfo] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    (client?.getContract(address) as Promise<Contract>)\n      .then((execTxs) => setContractInfo(execTxs))\n      .catch(() => setContractInfo(errorState));\n\n    const tags = [\n      {\n        key: \"execute._contract_address\",\n        value: address,\n      },\n    ];\n    (client?.searchTx({ tags: tags }) as Promise<ReadonlyArray<{ readonly hash: string }>>)\n      .then((execTxs) => setExecutionCount(execTxs.length))\n      .catch(() => setExecutionCount(errorState));\n  }, [client, address]);\n\n  return isLoadingState(contract) ? (\n    <tr>\n      <td>Loading ...</td>\n    </tr>\n  ) : isErrorState(contract) ? (\n    <tr>\n      <td>Error</td>\n    </tr>\n  ) : (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <ContractLink address={contract.address} />\n      </td>\n      <td>\n        <AccountLink address={contract.creator} />\n      </td>\n      <td>{contract.admin ? <AccountLink address={contract.admin} /> : \"–\"}</td>\n      <td>\n        {isLoadingState(executionCount)\n          ? \"Loading …\"\n          : isErrorState(executionCount)\n          ? \"Error\"\n          : executionCount}\n      </td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\n\nexport function InstancesEmptyState(): JSX.Element {\n  return <p>Code is not yet instantiated</p>;\n}\n","import \"./CodePage.css\";\n\nimport { CodeDetails } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { CodeInfo } from \"./CodeInfo\";\nimport InstanceRow from \"./InstanceRow\";\nimport { InstancesEmptyState } from \"./InstancesEmptyState\";\n\nexport function CodePage(): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const { codeId: codeIdParam } = useParams<{ readonly codeId: string }>();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | ErrorState | LoadingState>(loadingState);\n  const [contracts, setContracts] = React.useState<readonly string[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n  const [uploadTxHash, setUploadTxHash] = React.useState<string | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(codeId)\n      .then(setContracts)\n      .catch(() => setContracts(errorState));\n    client\n      ?.getCodeDetails(codeId)\n      .then(setDetails)\n      .catch(() => setDetails(errorState));\n    client\n      ?.searchTx({\n        tags: makeTags(`message.module=wasm&store_code.code_id=${codeId}`),\n      })\n      .then((results) => {\n        const first = results.find(() => true);\n        setUploadTxHash(first?.hash);\n      });\n  }, [client, codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\">Type: Wasm</li>\n              <li className=\"list-group-item\">\n                Size:{\" \"}\n                {isLoadingState(details)\n                  ? \"Loading …\"\n                  : isErrorState(details)\n                  ? \"Error\"\n                  : Math.round(details.data.length / 1024) + \" KiB\"}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <span>Loading …</span>\n            ) : isErrorState(details) ? (\n              <span>Error</span>\n            ) : (\n              <CodeInfo code={details} uploadTxHash={uploadTxHash} />\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Instances</h2>\n            {isLoadingState(contracts) ? (\n              <p>Loading …</p>\n            ) : isErrorState(contracts) ? (\n              <p>Error loading instances</p>\n            ) : contracts.length === 0 ? (\n              <InstancesEmptyState />\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Label</th>\n                    <th scope=\"col\">Contract</th>\n                    <th scope=\"col\">Creator</th>\n                    <th scope=\"col\">Admin</th>\n                    <th scope=\"col\">Executions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {contracts.map((address, index) => (\n                    <InstanceRow position={index + 1} address={address} key={address} />\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import \"./Code.css\";\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n  readonly index: number;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data, index }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n  const [instantiationInfo, setInstantiationInfo] = React.useState<\n    InstantiationInfo | ErrorState | LoadingState\n  >(loadingState);\n\n  React.useEffect(() => {\n    client\n      ?.getContracts(data.codeId)\n      .then((contracts) => {\n        setInstantiationInfo({\n          instantiations: contracts.length,\n        });\n      })\n      .catch(() => setInstantiationInfo(errorState));\n    // Don't make clientContext.client a dependency. Whenever it changes, this component is recreated entirely\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data.codeId]);\n\n  return (\n    <div className={\"flex-element-two-two mb-3\" + (index % 2 ? \" pl-lg-2\" : \" pr-lg-2\")}>\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {ellideMiddle(data.creator, 30)}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances:{\" \"}\n          {isLoadingState(instantiationInfo)\n            ? \"Loading …\"\n            : isErrorState(instantiationInfo)\n            ? \"Error\"\n            : instantiationInfo.instantiations}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport { WasmExtension } from \"@cosmjs/cosmwasm-stargate/build/queries\"; // missing export, see https://github.com/cosmos/cosmjs/issues/1000\nimport { toHex } from \"@cosmjs/encoding\";\nimport { QueryClient } from \"@cosmjs/stargate\";\nimport { QueryCodesResponse } from \"cosmjs-types/cosmwasm/wasm/v1/query\";\nimport React from \"react\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { Code, CodeData } from \"./Code\";\n\ninterface LoadedCode {\n  readonly source: string;\n  readonly data: CodeData;\n}\n\nfunction codeKey(code: LoadedCode): string {\n  return `${code.source}__${code.data.codeId}`;\n}\n\nexport function Codes(): JSX.Element {\n  const { client, nodeUrl } = React.useContext(ClientContext);\n  const [codes, setCodes] = React.useState<readonly LoadedCode[] | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    if (!client) return;\n\n    // This is accessing private fields. The query client cannot be used directly.\n    // This is unfortunate especially because CosmWasmClient.getCodes does not support pagination.\n    // However, there is no better way available right now.\n    const queryClient: QueryClient & WasmExtension = (client as any).forceGetQueryClient();\n\n    (async () => {\n      const all = [];\n\n      try {\n        let startAtKey: Uint8Array | undefined = undefined;\n        do {\n          const response: QueryCodesResponse = await queryClient.wasm.listCodeInfo(startAtKey);\n          const { codeInfos, pagination } = response;\n          const loadedCodes = (codeInfos || []).map(\n            (entry): LoadedCode => ({\n              source: nodeUrl,\n              data: {\n                codeId: entry.codeId.toNumber(),\n                checksum: toHex(entry.dataHash),\n                creator: entry.creator,\n              },\n            }),\n          );\n          loadedCodes.reverse();\n          all.unshift(...loadedCodes);\n          startAtKey = pagination?.nextKey;\n        } while (startAtKey?.length !== 0);\n      } catch (_e: any) {\n        setCodes(errorState);\n      }\n\n      setCodes(all);\n    })();\n  }, [client, nodeUrl]);\n\n  // Display codes vertically on small devices and in a flex container on large and above\n  return (\n    <div className=\"d-lg-flex flex-wrap\">\n      {isLoadingState(codes) ? (\n        <p>Loading …</p>\n      ) : isErrorState(codes) ? (\n        <p>Error loading codes</p>\n      ) : codes.length === 0 ? (\n        <p>No code uploaded yet</p>\n      ) : (\n        codes.map((code, index) => <Code data={code.data} index={index} key={codeKey(code)} />)\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { Codes } from \"./Codes\";\n\nexport function CodesPage(): JSX.Element {\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  Codes\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <Codes />\n          </div>\n        </div>\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n  readonly text?: string;\n}\n\nexport function CodeLink({ codeId, text }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>{text || `Code #${codeId}`}</Link>;\n}\n","// Place error box below text box, so appearing error does not push text box down\nexport const jsonInputStyle = {\n  container: { display: \"flex\", flexDirection: \"column\" },\n  body: { order: \"1\" },\n  warningBox: { order: \"2\" },\n};\n","import { ExecuteResult } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, Coin } from \"@cosmjs/stargate\";\nimport React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst executePlaceholder = {\n  transfer: { recipient: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\", amount: \"1\" },\n};\n\nconst coinsPlaceholder = [{ denom: settings.backend.denominations[0], amount: \"1\" }];\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function ExecuteContract({ contractAddress }: Props): JSX.Element {\n  const { userAddress, signingClient } = React.useContext(ClientContext);\n\n  const [executing, setExecuting] = React.useState(false);\n  const [error, setError] = React.useState<string>();\n\n  const [memo, setMemo] = React.useState<string>();\n\n  const [msgObject, setMsgObject] = React.useState<Result<Record<string, any>>>();\n  const [coinsObject, setCoinsObject] = React.useState<Result<ReadonlyArray<Coin>>>();\n\n  const [executeResponse, setExecuteResponse] = React.useState<Result<ExecuteResult>>();\n\n  React.useEffect(() => {\n    setMsgObject({ result: executePlaceholder });\n    setCoinsObject({ result: coinsPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (msgObject?.error) {\n      setError(msgObject.error);\n      return;\n    }\n\n    if (executeResponse?.error) {\n      setError(executeResponse.error);\n      return;\n    }\n\n    if (coinsObject?.error) {\n      setError(coinsObject.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [coinsObject, executeResponse, msgObject]);\n\n  async function executeContract(): Promise<void> {\n    if (!msgObject?.result || !userAddress || !signingClient) return;\n\n    setExecuting(true);\n\n    try {\n      const executeResponseResult: ExecuteResult = await signingClient.execute(\n        userAddress,\n        contractAddress,\n        msgObject.result,\n        calculateFee(400000, settings.backend.gasPrice),\n        memo,\n        coinsObject?.result,\n      );\n      setExecuteResponse({ result: executeResponseResult });\n    } catch (error: any) {\n      setExecuteResponse({ error: `Execute error: ${error.message}` });\n    }\n\n    setExecuting(false);\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Execute contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={executePlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setMsgObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Coins to transfer:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"120px\"\n            placeholder={coinsPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setCoinsObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Memo:</span>\n          <input\n            className=\"ml-3 flex-grow-1\"\n            value={memo}\n            onChange={(event) => setMemo(event.target.value)}\n          />\n        </li>\n        <div className=\"list-group-item btn-group\">\n          {executing ? (\n            <button className=\"btn btn-primary\" type=\"button\" disabled>\n              <span className=\"spinner-border spinner-border-sm mr-2\" role=\"status\" aria-hidden=\"true\"></span>\n              Executing...\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-primary\"\n              onClick={executeContract}\n              disabled={!msgObject?.result || !signingClient}\n            >\n              Execute contract\n            </button>\n          )}\n        </div>\n        {executeResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The contract formatted input\">Response:</span>\n            <pre className=\"mb-0\">{JSON.stringify(executeResponse.result, undefined, \"  \")}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import { MsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <TransactionLink transactionId={execution.transactionId} />\n            </td>\n            <td>\n              <AccountLink address={execution.msg.sender} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\n\ninterface Props {\n  readonly contractCodeHistory: readonly ContractCodeHistoryEntry[];\n}\n\nexport function HistoryInfo({ contractCodeHistory }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <span title=\"The contract level message history\">History</span>\n        </li>\n        {contractCodeHistory.map((entry, index) => (\n          <li key={index} className=\"list-group-item\">\n            <span title=\"The message operation type\">\n              {entry.operation} - <CodeLink codeId={entry.codeId} />\n            </span>\n            <ReactJson src={entry.msg} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport React from \"react\";\n\nimport { AccountLink } from \"../../components/AccountLink\";\nimport { TransactionLink } from \"../../components/TransactionLink\";\nimport { ErrorState, isErrorState, isLoadingState, LoadingState } from \"../../ui-utils/states\";\n\ninterface Props {\n  readonly contract: Contract;\n  readonly instantiationTxHash: string | undefined | ErrorState | LoadingState;\n}\n\nexport function InitializationInfo({ contract, instantiationTxHash }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Instantiation transaction:{\" \"}\n          {isLoadingState(instantiationTxHash) ? (\n            \"Loading …\"\n          ) : isErrorState(instantiationTxHash) ? (\n            \"Error\"\n          ) : instantiationTxHash === undefined ? (\n            \"–\"\n          ) : (\n            <TransactionLink transactionId={instantiationTxHash} />\n          )}\n        </li>\n        <li className=\"list-group-item\">\n          Creator: <AccountLink address={contract.creator} maxLength={null} />\n        </li>\n        <li className=\"list-group-item\">\n          Admin: {contract.admin ? <AccountLink address={contract.admin} maxLength={null} /> : \"–\"}\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport JSONInput from \"react-json-editor-ajrm\";\n\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { jsonInputStyle } from \"../../ui-utils/jsonInput\";\nimport { Result } from \"./ContractPage\";\n\nconst queryPlaceholder = { get_balance: { address: \"cosmos1zk4hr47hlch274x28j32dgnhuyewqjrwxn4mvm\" } };\n\ninterface Props {\n  readonly contractAddress: string;\n}\n\nexport function QueryContract({ contractAddress }: Props): JSX.Element {\n  const { client } = React.useContext(ClientContext);\n\n  const [error, setError] = React.useState<string>();\n  const [queryObject, setQueryObject] = React.useState<Result<Record<string, any>>>();\n  const [queryResponse, setQueryResponse] = React.useState<Result<string>>();\n\n  React.useEffect(() => {\n    setQueryObject({ result: queryPlaceholder });\n  }, []);\n\n  React.useEffect(() => {\n    if (queryObject?.error) {\n      setError(queryObject.error);\n      return;\n    }\n\n    if (queryResponse?.error) {\n      setError(queryResponse.error);\n      return;\n    }\n\n    setError(undefined);\n  }, [queryObject, queryResponse]);\n\n  async function runQuery(): Promise<void> {\n    if (!client || !queryObject?.result) return;\n\n    try {\n      const queryResponseResult: Record<string, any> = await client.queryContractSmart(\n        contractAddress,\n        queryObject.result,\n      );\n\n      const formattedResult = JSON.stringify(queryResponseResult, null, \"  \");\n      setQueryResponse({ result: formattedResult });\n    } catch (error: any) {\n      setQueryResponse({ error: `Query error: ${error.message}` });\n    }\n  }\n\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <span title=\"The contract query input\">Query contract:</span>\n        </li>\n        <li className=\"list-group-item d-flex align-items-baseline\">\n          <JSONInput\n            width=\"100%\"\n            height=\"200px\"\n            placeholder={queryPlaceholder}\n            confirmGood={false}\n            style={jsonInputStyle}\n            onChange={({ jsObject }: any) => setQueryObject({ result: jsObject })}\n          />\n        </li>\n        <li className=\"list-group-item\">\n          <button\n            className=\"btn btn-primary\"\n            style={{ cursor: client && queryObject?.result ? \"pointer\" : \"not-allowed\" }}\n            onClick={runQuery}\n            disabled={!queryObject?.result}\n          >\n            Run query\n          </button>\n        </li>\n        {queryResponse?.result ? (\n          <li className=\"list-group-item\">\n            <span title=\"The query response\">Response:</span>\n            <pre className=\"mb-0\">{queryResponse.result}</pre>\n          </li>\n        ) : null}\n        {error ? (\n          <li className=\"list-group-item\">\n            <span className=\"text-danger\" title=\"The contract query error\">\n              {error}\n            </span>\n          </li>\n        ) : null}\n      </ul>\n    </div>\n  );\n}\n","import \"./ContractPage.css\";\n\nimport { Contract, ContractCodeHistoryEntry } from \"@cosmjs/cosmwasm-stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport { Coin as ICoin } from \"cosmjs-types/cosmos/base/v1beta1/coin\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport { Any } from \"cosmjs-types/google/protobuf/any\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { CodeLink } from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { StargateClient } from \"../../ui-utils/clients\";\nimport { makeTags } from \"../../ui-utils/sdkhelpers\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport { ExecuteContract } from \"./ExecuteContract\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\nimport { HistoryInfo } from \"./HistoryInfo\";\nimport { InitializationInfo } from \"./InitializationInfo\";\nimport { QueryContract } from \"./QueryContract\";\n\ntype IAnyMsgExecuteContract = {\n  readonly typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\";\n  readonly value: Uint8Array;\n};\n\nexport type Result<T> = { readonly result?: T; readonly error?: string };\n\nfunction isStargateMsgExecuteContract(msg: Any): msg is IAnyMsgExecuteContract {\n  return msg.typeUrl === \"/cosmwasm.wasm.v1.MsgExecuteContract\" && !!msg.value;\n}\n\nconst getAndSetDetails = (\n  client: StargateClient,\n  contractAddress: string,\n  setDetails: (details: Contract | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .getContract(contractAddress)\n    .then(setDetails)\n    .catch(() => setDetails(errorState));\n};\n\nconst getAndSetContractCodeHistory = (\n  client: StargateClient,\n  contractAddress: string,\n  setContractCodeHistory: (contractCodeHistory: readonly ContractCodeHistoryEntry[]) => void,\n): void => {\n  client\n    .getContractCodeHistory(contractAddress)\n    .then(setContractCodeHistory)\n    .catch((error) => {\n      console.error(error);\n    });\n};\n\nconst getAndSetInstantiationTxHash = (\n  client: StargateClient,\n  contractAddress: string,\n  setInstantiationTxHash: (instantiationTxHash: string | undefined | ErrorState | LoadingState) => void,\n): void => {\n  client\n    .searchTx({\n      tags: makeTags(`message.module=wasm&instantiate._contract_address=${contractAddress}`),\n    })\n    .then((results) => {\n      const first = results.find(() => true);\n      setInstantiationTxHash(first?.hash);\n    })\n    .catch(() => setInstantiationTxHash(errorState));\n};\n\nfunction getExecutionFromStargateMsgExecuteContract(typeRegistry: Registry, tx: IndexedTx) {\n  return (msg: IAnyMsgExecuteContract, i: number) => {\n    const decodedMsg = typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value });\n    return {\n      key: `${tx.hash}_${i}`,\n      height: tx.height,\n      transactionId: tx.hash,\n      msg: decodedMsg,\n    };\n  };\n}\n\nexport function ContractPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { contractAddress: contractAddressParam } = useParams<{ readonly contractAddress: string }>();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<Contract | ErrorState | LoadingState>(loadingState);\n  const [balance, setBalance] = React.useState<readonly ICoin[] | ErrorState | LoadingState>(loadingState);\n  const [instantiationTxHash, setInstantiationTxHash] = React.useState<\n    string | undefined | ErrorState | LoadingState\n  >(loadingState);\n  const [contractCodeHistory, setContractCodeHistory] = React.useState<readonly ContractCodeHistoryEntry[]>(\n    [],\n  );\n  const [executions, setExecutions] = React.useState<readonly Execution[] | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  React.useEffect(() => {\n    if (!client) return;\n\n    getAndSetContractCodeHistory(client, contractAddress, setContractCodeHistory);\n    getAndSetDetails(client, contractAddress, setDetails);\n    getAndSetInstantiationTxHash(client, contractAddress, setInstantiationTxHash);\n\n    Promise.all(settings.backend.denominations.map((denom) => client.getBalance(contractAddress, denom)))\n      .then((balances) => {\n        const filteredBalances = balances.filter((balance): balance is Coin => balance !== null);\n        setBalance(filteredBalances);\n      })\n      .catch(() => setBalance(errorState));\n\n    client\n      .searchTx({\n        tags: makeTags(`message.module=wasm&execute._contract_address=${contractAddress}`),\n      })\n      .then((txs) => {\n        const out = txs.reduce((executions: readonly Execution[], tx: IndexedTx): readonly Execution[] => {\n          const decodedTx = Tx.decode(tx.tx);\n          const txExecutions = (decodedTx?.body?.messages ?? [])\n            .filter(isStargateMsgExecuteContract)\n            .map(getExecutionFromStargateMsgExecuteContract(typeRegistry, tx));\n          return [...executions, ...txExecutions];\n        }, []);\n        setExecutions(out);\n      })\n      .catch(() => setExecutions(errorState));\n  }, [client, contractAddress, typeRegistry]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3 contract-container\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/codes\">Codes</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                  {isLoadingState(details) ? (\n                    <span>Loading …</span>\n                  ) : isErrorState(details) ? (\n                    <span>Error</span>\n                  ) : (\n                    <CodeLink codeId={details.codeId} />\n                  )}\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n        <div className=\"row white-row\">\n          <div className=\"col-12 col-md-6\">\n            <h1>{pageTitle}</h1>\n            <ul className=\"list-group list-group-horizontal mb-3\">\n              <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n                Balance:{\" \"}\n                {isLoadingState(balance)\n                  ? \"Loading …\"\n                  : isErrorState(balance)\n                  ? \"Error\"\n                  : printableBalance(balance)}\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-12 col-md-6\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>An Error occurred when loading contract</p>\n            ) : (\n              <>\n                <InitializationInfo contract={details} instantiationTxHash={instantiationTxHash} />\n                <HistoryInfo contractCodeHistory={contractCodeHistory} />\n                <QueryContract contractAddress={contractAddress} />\n                <ExecuteContract contractAddress={contractAddress} />\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Executions</h2>\n            {isLoadingState(executions) ? (\n              <p>Loading …</p>\n            ) : isErrorState(executions) ? (\n              <p>An Error occurred when loading transactions</p>\n            ) : executions.length !== 0 ? (\n              <ExecutionsTable executions={executions} />\n            ) : (\n              <p>Contract was not yet executed</p>\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import { fromRfc3339 } from \"@cosmjs/encoding\";\nimport { IndexedTx } from \"@cosmjs/stargate\";\nimport React from \"react\";\n\nconst checkMark = \"✔\"; // U+2714 HEAVY CHECK MARK\nconst xMark = \"🗙\"; // U+1F5D9 CANCELLATION X\n\ninterface Props {\n  readonly tx: IndexedTx;\n  readonly timestamp: string;\n}\n\nexport function ExecutionInfo({ tx, timestamp }: Props): JSX.Element {\n  const time = timestamp ? fromRfc3339(timestamp) : null;\n  const success = tx.code === 0;\n\n  return (\n    <ul className=\"list-group list-group-horizontal mb-3\">\n      <li className=\"list-group-item\">Height: {tx.height}</li>\n      <li className=\"list-group-item\">\n        <span title={timestamp}>Time: {time?.toLocaleString()}</span>\n      </li>\n      <li className=\"list-group-item\">\n        <span title={`Execution succeeded: ${success ? \"yes\" : \"no\"}`}>\n          Success: {success ? checkMark : `${xMark} (error code ${tx.code})`}\n        </span>\n      </li>\n    </ul>\n  );\n}\n","import { MsgExecuteContract as IMsgExecuteContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ContractLink } from \"../../../components/ContractLink\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgExecuteContract;\n}\n\nexport function MsgExecuteContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Contract: <ContractLink address={msg.contract ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Sent funds: {printableBalance(msg.funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Handle message</span>:\n        <ReactJson src={parseMsgContract(msg.msg)} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgInstantiateContract as IMsgInstantiateContract } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React, { Fragment } from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { CodeLink } from \"../../../components/CodeLink\";\nimport { parseMsgContract, printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgInstantiateContract;\n}\n\nexport function MsgInstantiateContract({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender || \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Code ID: <CodeLink codeId={msg.codeId?.toNumber() ?? 0} text={msg.codeId?.toString() ?? \"-\"} />\n      </li>\n      <li className=\"list-group-item\">Label: {msg.label}</li>\n      <li className=\"list-group-item\">Init funds: {printableBalance(msg.funds)}</li>\n      <li className=\"list-group-item\">\n        <span title=\"The contract level message\">Init message</span>:\n        <ReactJson src={parseMsgContract(msg.msg)} />\n      </li>\n    </Fragment>\n  );\n}\n","import { MsgSend as IMsgSend } from \"cosmjs-types/cosmos/bank/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { printableBalance } from \"../../../ui-utils\";\n\ninterface Props {\n  readonly msg: IMsgSend;\n}\n\nexport function MsgSend({ msg }: Props): JSX.Element {\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.fromAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">\n        Recipient: <AccountLink address={msg.toAddress ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Amount: {printableBalance(msg.amount ?? [])}</li>\n    </Fragment>\n  );\n}\n","import { fromHex } from \"@cosmjs/encoding\";\n\nfunction arrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  const difference = a.some((byte, index) => b[index] !== byte);\n  return !difference;\n}\n\nfunction arrayStartsWith(a: Uint8Array, prefix: Uint8Array): boolean {\n  return arrayEqual(a.slice(0, prefix.length), prefix);\n}\n\nconst magic = {\n  gzip: fromHex(\"1F8B\"),\n  wasm: fromHex(\"0061736d\"),\n};\n\nexport type SupportedTypes = \"gzip\" | \"wasm\";\n\nexport function getFileType(data: Uint8Array): SupportedTypes | undefined {\n  if (arrayStartsWith(data, magic.gzip)) return \"gzip\";\n  if (arrayStartsWith(data, magic.wasm)) return \"wasm\";\n  return undefined;\n}\n","import \"./MsgStoreCode.css\";\n\nimport { toBase64 } from \"@cosmjs/encoding\";\nimport { MsgStoreCode as IMsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1beta1/tx\";\nimport React, { Fragment } from \"react\";\n\nimport { AccountLink } from \"../../../components/AccountLink\";\nimport { ellideRight } from \"../../../ui-utils\";\nimport { getFileType } from \"./magic\";\n\ninterface Props {\n  readonly msg: IMsgStoreCode;\n}\n\nexport function MsgStoreCode({ msg }: Props): JSX.Element {\n  const [showAllCode, setShowAllCode] = React.useState<boolean>(false);\n\n  const dataInfo = React.useMemo(() => {\n    const data = msg.wasmByteCode ?? new Uint8Array();\n    return `${getFileType(data) || \"unknown\"}; ${data.length} bytes`;\n  }, [msg.wasmByteCode]);\n\n  return (\n    <Fragment>\n      <li className=\"list-group-item\">\n        Sender: <AccountLink address={msg.sender ?? \"-\"} maxLength={null} />\n      </li>\n      <li className=\"list-group-item\">Source: {msg.source || \"–\"}</li>\n      <li className=\"list-group-item\">Builder: {msg.builder || \"–\"}</li>\n      <li className=\"list-group-item\">\n        Data: {dataInfo}{\" \"}\n        {!showAllCode ? (\n          <Fragment>\n            <code>{ellideRight(toBase64(msg.wasmByteCode ?? new Uint8Array()), 300)}</code>{\" \"}\n            <button className=\"btn btn-sm btn-outline-primary\" onClick={() => setShowAllCode(true)}>\n              Show all\n            </button>\n          </Fragment>\n        ) : (\n          <code className=\"long-inline-code\">{msg.wasmByteCode}</code>\n        )}\n      </li>\n    </Fragment>\n  );\n}\n","import { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\n\nimport { printableBalance } from \"../../ui-utils\";\n\ninterface Props {\n  readonly tx: Tx;\n}\n\nexport function TxInfo({ tx }: Props): JSX.Element {\n  return (\n    <div className=\"card mb-3\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">Memo: {tx.body?.memo || \"–\"}</li>\n        <li className=\"list-group-item\">Fee: {printableBalance(tx.authInfo?.fee?.amount ?? [])}</li>\n        <li className=\"list-group-item\">Gas: {tx.authInfo?.fee?.gasLimit?.toString() ?? \"0\"}</li>\n        <li className=\"list-group-item\">Signatures: {tx.signatures?.length ?? 0}</li>\n      </ul>\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { Block, IndexedTx } from \"@cosmjs/stargate\";\nimport { Tx } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\nimport React from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { Header } from \"../../components/Header\";\nimport { ClientContext } from \"../../contexts/ClientContext\";\nimport { ellideMiddle } from \"../../ui-utils\";\nimport {\n  ErrorState,\n  errorState,\n  isErrorState,\n  isLoadingState,\n  LoadingState,\n  loadingState,\n} from \"../../ui-utils/states\";\nimport {\n  isAnyMsgExecuteContract,\n  isAnyMsgInstantiateContract,\n  isAnyMsgSend,\n  isAnyMsgStoreCode,\n} from \"../../ui-utils/txs\";\nimport { ExecutionInfo } from \"./ExecutionInfo\";\nimport { MsgExecuteContract } from \"./msgs/MsgExecuteContract\";\nimport { MsgInstantiateContract } from \"./msgs/MsgInstantiateContract\";\nimport { MsgSend } from \"./msgs/MsgSend\";\nimport { MsgStoreCode } from \"./msgs/MsgStoreCode\";\nimport { TxInfo } from \"./TxInfo\";\n\nexport function TxPage(): JSX.Element {\n  const { client, typeRegistry } = React.useContext(ClientContext);\n  const { txId: txIdParam } = useParams<{ readonly txId: string }>();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | ErrorState | LoadingState>(\n    loadingState,\n  );\n\n  const [block, setBlockInfo] = React.useState<Block | undefined | ErrorState | LoadingState>(loadingState);\n\n  React.useEffect(() => {\n    if (!client) return;\n\n    client\n      .getTx(txId)\n      .then((tx) => {\n        setDetails(tx || undefined);\n        if (!tx) return;\n        client\n          .getBlock(tx.height)\n          .then((b) => {\n            setBlockInfo(b);\n          })\n          .catch(() => setBlockInfo(errorState));\n      })\n      .catch(() => setDetails(errorState));\n  }, [client, txId, typeRegistry]);\n\n  return (\n    <div className=\"page\">\n      <Header />\n      <div className=\"container mt-3\">\n        <div className=\"row white-row white-row-first\">\n          <div className=\"col\">\n            <nav aria-label=\"breadcrumb\">\n              <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                  {pageTitle}\n                </li>\n              </ol>\n            </nav>\n          </div>\n        </div>\n\n        <div className=\"row white-row\">\n          <div className=\"col\">\n            <h1>{pageTitle}</h1>\n            {isLoadingState(details) ? (\n              <p>Loading...</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <ExecutionInfo\n                tx={details}\n                timestamp={isLoadingState(block) || isErrorState(block) ? \"\" : block?.header.time || \"\"}\n              />\n            )}\n          </div>\n          <div className=\"col\">\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              <TxInfo tx={Tx.decode(details.tx)} />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row white-row white-row-last\">\n          <div className=\"col\">\n            <h2>Messages</h2>\n            <p>\n              A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n              executed.\n            </p>\n            {isLoadingState(details) ? (\n              <p>Loading …</p>\n            ) : isErrorState(details) ? (\n              <p>Error</p>\n            ) : details === undefined ? (\n              <p>Transaction not found</p>\n            ) : (\n              Tx.decode(details.tx).body?.messages?.map((msg: any, index: number) => (\n                <div className=\"card mb-3\" key={`${details.hash}_${index}`}>\n                  <div className=\"card-header\">\n                    Message {index + 1} (Type: <code>{msg.typeUrl || <em>unset</em>}</code>)\n                  </div>\n                  <ul className=\"list-group list-group-flush\">\n                    {isAnyMsgSend(msg) ? (\n                      <MsgSend msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgStoreCode(msg) ? (\n                      <MsgStoreCode msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })} />\n                    ) : isAnyMsgInstantiateContract(msg) ? (\n                      <MsgInstantiateContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : isAnyMsgExecuteContract(msg) ? (\n                      <MsgExecuteContract\n                        msg={typeRegistry.decode({ typeUrl: msg.typeUrl, value: msg.value })}\n                      />\n                    ) : (\n                      <li className=\"list-group-item\">\n                        <em>This message type cannot be displayed</em>\n                      </li>\n                    )}\n                  </ul>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <FooterRow />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import { Registry } from \"@cosmjs/proto-signing\";\nimport { MsgExecuteContract, MsgInstantiateContract, MsgStoreCode } from \"cosmjs-types/cosmwasm/wasm/v1/tx\";\nimport React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router\";\n\nimport { ClientContext, ClientContextValue } from \"../contexts/ClientContext\";\nimport { AccountPage } from \"../pages/account/AccountPage\";\nimport { CodePage } from \"../pages/code/CodePage\";\nimport { CodesPage } from \"../pages/codes/CodesPage\";\nimport { ContractPage } from \"../pages/contract/ContractPage\";\nimport { TxPage } from \"../pages/tx/TxPage\";\nimport { settings } from \"../settings\";\nimport { StargateClient, StargateSigningClient } from \"../ui-utils/clients\";\nimport {\n  msgExecuteContractTypeUrl,\n  msgInstantiateContractTypeUrl,\n  msgStoreCodeTypeUrl,\n} from \"../ui-utils/txs\";\nimport { FlexibleRouter } from \"./FlexibleRouter\";\n\nconst { nodeUrls } = settings.backend;\nconst typeRegistry = new Registry([\n  [msgStoreCodeTypeUrl, MsgStoreCode],\n  [msgInstantiateContractTypeUrl, MsgInstantiateContract],\n  [msgExecuteContractTypeUrl, MsgExecuteContract],\n]);\n\nexport function App(): JSX.Element {\n  const [nodeUrl, setNodeUrl] = React.useState(nodeUrls[0]);\n  const [userAddress, setUserAddress] = React.useState<string>();\n  const [signingClient, setSigningClient] = React.useState<StargateSigningClient>();\n  const [contextValue, setContextValue] = React.useState<ClientContextValue>({\n    nodeUrl: nodeUrl,\n    client: null,\n    typeRegistry: typeRegistry,\n    resetClient: setNodeUrl,\n    userAddress: userAddress,\n    setUserAddress: setUserAddress,\n    signingClient: signingClient,\n    setSigningClient: setSigningClient,\n  });\n\n  React.useEffect(() => {\n    (async function updateContextValue() {\n      const client = await StargateClient.connect(nodeUrl);\n      setContextValue((prevContextValue) => ({ ...prevContextValue, nodeUrl: nodeUrl, client: client }));\n    })();\n  }, [nodeUrl]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, signingClient: signingClient }));\n  }, [signingClient]);\n\n  React.useEffect(() => {\n    setContextValue((prevContextValue) => ({ ...prevContextValue, userAddress: userAddress }));\n  }, [userAddress]);\n\n  return (\n    <ClientContext.Provider value={contextValue}>\n      <FlexibleRouter type={settings.deployment.routerType}>\n        <Switch>\n          <Route exact path=\"/codes\" component={CodesPage} />\n          <Route path=\"/codes/:codeId\" component={CodePage} />\n          <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n          <Route path=\"/transactions/:txId\" component={TxPage} />\n          <Route path=\"/accounts/:address\" component={AccountPage} />\n          <Route component={() => <Redirect to=\"/codes\" />} />\n        </Switch>\n      </FlexibleRouter>\n    </ClientContext.Provider>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport \"jquery/dist/jquery.slim\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}