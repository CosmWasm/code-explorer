{"version":3,"sources":["components/FooterRow.tsx","settings.ts","pages/code/InstanceRow.tsx","pages/code/VerifyContract.tsx","pages/code/CodePage.tsx","ui-utils/index.ts","pages/codeslist/Code.tsx","pages/codeslist/Codes.tsx","pages/codeslist/CodeslistPage.tsx","components/CodeLink.tsx","pages/contract/ExecutionsTable.tsx","index.tsx","components/FlexibleRouter.tsx","pages/contract/ContractPage.tsx","pages/tx/TxPage.tsx"],"names":["separatorStyle","borderColor","whiteText","color","FooterRow","endpoint","className","style","href","settings","backend","nodeUrl","deployment","routerType","InstanceRow","position","contract","executionCount","setExecutionCount","React","useState","useEffect","client","CosmWasmClient","tags","key","value","address","searchTx","then","execTxs","length","scope","label","to","creator","undefined","VerifyContract","checksum","source","builder","verificationCmd","quote","CodePage","codeId","codeIdParam","useParams","parseInt","details","setDetails","contracts","setContracts","getContracts","getCodeDetails","pageTitle","aria-label","aria-current","Math","round","data","map","index","ellideMiddle","str","maxOutLen","frontLen","ceil","tailLen","floor","slice","printableCoin","coin","denom","startsWith","ticker","toUpperCase","Decimal","fromAtomics","amount","toString","printableBalance","balance","join","Code","instantiationInfo","setInstantiationInfo","instantiations","Codes","codes","setCodes","getCodes","codeInfos","processed","response","id","reverse","code","CodeslistPage","CodeLink","ExecutionsTable","executions","execution","height","transactionId","title","msg","sender","ReactDOM","render","type","children","basename","process","path","component","contractAddress","contractAddressParam","account","setAccount","setExecutions","getContract","getAccount","out","Array","tx","entries","types","isMsgExecuteContract","push","hash","JSON","stringify","initMsg","txId","txIdParam","results","firstResult","find","timestamp","signatures","sent_funds","document","getElementById"],"mappings":"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","file":"static/js/main.0b9a977f.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface Props {\n  readonly endpoint: string;\n}\n\nconst separatorStyle: React.CSSProperties = {\n  borderColor: \"rgba(255, 255, 255, 0.8)\",\n};\nconst whiteText = { color: \"#f0f0f0\" };\n\n/** Place me as a row in a container */\nexport function FooterRow({ endpoint }: Props): JSX.Element {\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <hr style={separatorStyle} />\n        <p style={whiteText} className=\"text-center font-weight-light\">\n          Connected to endpoint {endpoint} |{\" \"}\n          <a href=\"https://github.com/confio/code-explorer\" style={whiteText}>\n            Fork me on GitHub\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n","export interface BackendSettings {\n  readonly nodeUrl: string;\n}\n\nexport interface DeploymentSettings {\n  readonly routerType: \"browser-router\" | \"hash-router\";\n}\n\nexport interface Settings {\n  /** Where do we connect to */\n  readonly backend: BackendSettings;\n  /** How are we hosted */\n  readonly deployment: DeploymentSettings;\n}\n\nconst demonetSettings: BackendSettings = {\n  nodeUrl: \"https://lcd.demo-07.cosmwasm.com\",\n};\n\nconst devnetSettings: BackendSettings = {\n  nodeUrl: \"http://localhost:1317\",\n};\n\nconst developmentServer: DeploymentSettings = {\n  routerType: \"browser-router\",\n};\n\nconst ghPages: DeploymentSettings = {\n  routerType: \"hash-router\",\n};\n\nexport const settings: Settings = {\n  backend: process.env.NODE_ENV === \"development\" ? devnetSettings : demonetSettings,\n  deployment: process.env.NODE_ENV === \"production\" ? ghPages : developmentServer,\n};\n","import { Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../../settings\";\n\ninterface Props {\n  readonly position: number;\n  readonly contract: Contract;\n}\n\nfunction InstanceRow({ position, contract }: Props): JSX.Element {\n  const [executionCount, setExecutionCount] = React.useState<number | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contract.address,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => setExecutionCount(execTxs.length));\n  }, [contract.address]);\n\n  return (\n    <tr>\n      <th scope=\"row\">{position}</th>\n      <td>{contract.label}</td>\n      <td>\n        <Link to={`/contracts/${contract.address}`}>{contract.address}</Link>\n      </td>\n      <td>{contract.creator}</td>\n      <td>{executionCount === undefined ? \"Loading …\" : executionCount}</td>\n    </tr>\n  );\n}\n\nexport default InstanceRow;\n","import React from \"react\";\nimport { quote } from \"shell-quote\";\n\ninterface Props {\n  readonly checksum: string;\n  readonly source: string | undefined;\n  readonly builder: string | undefined;\n}\n\nfunction VerifyContract({ checksum, source, builder }: Props): JSX.Element {\n  if (!source || !builder) {\n    return (\n      <span>\n        Contract cannot be verified since <code>builder</code> or <code>source</code> is missing\n      </span>\n    );\n  }\n\n  const verificationCmd = quote([\"cosmwasm-verify\", source, builder, checksum]);\n\n  return <code>{verificationCmd}</code>;\n}\n\nexport default VerifyContract;\n","import \"./CodePage.css\";\n\nimport { CodeDetails, Contract, CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { settings } from \"../../settings\";\nimport InstanceRow from \"./InstanceRow\";\nimport VerifyContract from \"./VerifyContract\";\n\nfunction CodePage(): JSX.Element {\n  const { codeId: codeIdParam } = useParams();\n  const codeId = parseInt(codeIdParam || \"0\", 10);\n\n  const [details, setDetails] = React.useState<CodeDetails | undefined>();\n  const [contracts, setContracts] = React.useState<readonly Contract[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContracts(codeId).then(setContracts);\n    client.getCodeDetails(codeId).then(setDetails);\n  }, [codeId]);\n\n  const pageTitle = <span>Code #{codeId}</span>;\n\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row code-row code-row-first\">\n        <div className=\"col\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                {pageTitle}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </div>\n      <div className=\"row code-row\">\n        <div className=\"col\">\n          <h1>{pageTitle}</h1>\n          <ul className=\"list-group list-group-horizontal\">\n            <li className=\"list-group-item\">Type: Wasm</li>\n            <li className=\"list-group-item\">\n              Size: {details ? Math.round(details.data.length / 1024) + \" KiB\" : \"Loading …\"}\n            </li>\n          </ul>\n        </div>\n        <div className=\"col\">\n          <h2>Verification</h2>\n          <p>\n            Code verfication allows you to verify that uploaded code was compiled from the source it claims.{\" \"}\n            <a href=\"https://github.com/confio/cosmwasm-verify\">Tell me more!</a>\n          </p>\n          <p>\n            {details ? (\n              <VerifyContract checksum={details.checksum} source={details.source} builder={details.builder} />\n            ) : (\n              <span>Loading …</span>\n            )}\n          </p>\n        </div>\n      </div>\n      <div className=\"row code-row code-row-last\">\n        <div className=\"col\">\n          <h2>Instances</h2>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Label</th>\n                <th scope=\"col\">Contract</th>\n                <th scope=\"col\">Creator</th>\n                <th scope=\"col\">Executions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {contracts.map((contract, index) => (\n                <InstanceRow position={index + 1} contract={contract} key={contract.address} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      <FooterRow endpoint={settings.backend.nodeUrl} />\n    </div>\n  );\n}\n\nexport default CodePage;\n","import { types } from \"@cosmwasm/sdk\";\nimport { Decimal } from \"@iov/encoding\";\n\nexport function ellideMiddle(str: string, maxOutLen: number): string {\n  if (str.length <= maxOutLen) {\n    return str;\n  }\n  const ellide = \"…\";\n  const frontLen = Math.ceil((maxOutLen - ellide.length) / 2);\n  const tailLen = Math.floor((maxOutLen - ellide.length) / 2);\n  return str.slice(0, frontLen) + ellide + str.slice(-tailLen);\n}\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin: types.Coin): string {\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance: readonly types.Coin[]): string {\n  if (balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n","import \"./Code.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { settings } from \"../../settings\";\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface CodeData {\n  readonly codeId: number;\n  readonly checksum: string;\n  readonly creator: string;\n  readonly source: string;\n  readonly builder: string;\n}\n\ninterface Props {\n  readonly data: CodeData;\n}\n\ninterface InstantiationInfo {\n  readonly instantiations: number;\n}\n\nexport function Code({ data }: Props): JSX.Element {\n  const [instantiationInfo, setInstantiationInfo] = React.useState<InstantiationInfo | undefined>();\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContracts(data.codeId).then(contracts => {\n      setInstantiationInfo({\n        instantiations: contracts.length,\n      });\n    });\n  }, [data.codeId]);\n\n  return (\n    <div className=\"p-2 flex-grow-1\">\n      <Link to={`/codes/${data.codeId}`} className=\"code-content\">\n        <div className=\"id\">#{data.codeId}</div>\n        <div className=\"details\">\n          Creator: {data.creator}\n          <br />\n          Source: {ellideMiddle(data.source, 45) || \"–\"}\n          <br />\n          Builder: {data.builder || \"–\"}\n          <br />\n          Checksum: {data.checksum.slice(0, 10)}\n          <br />\n          Instances: {instantiationInfo ? instantiationInfo.instantiations : \"Loading …\"}\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import \"./Codes.css\";\n\nimport { CosmWasmClient } from \"@cosmwasm/sdk\";\nimport React from \"react\";\n\nimport { settings } from \"../../settings\";\nimport { Code, CodeData } from \"./Code\";\n\nexport function Codes(): JSX.Element {\n  const [codes, setCodes] = React.useState<readonly CodeData[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getCodes().then(codeInfos => {\n      const processed = codeInfos\n        .map(\n          (response): CodeData => ({\n            codeId: response.id,\n            checksum: response.checksum,\n            creator: response.creator,\n            source: response.source || \"\",\n            builder: response.builder || \"\",\n          }),\n        )\n        .reverse();\n      setCodes(processed);\n    });\n  }, []);\n\n  return (\n    <div className=\"d-flex flex-wrap mb-3\">\n      {codes.map(code => (\n        <Code data={code} key={code.codeId} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { settings } from \"../../settings\";\nimport { Codes } from \"./Codes\";\n\nexport default function CodeslistPage(): JSX.Element {\n  return (\n    <div className=\"container mt-3\">\n      <Codes />\n      <FooterRow endpoint={settings.backend.nodeUrl} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  readonly codeId: number;\n}\n\nexport default function CodeLink({ codeId }: Props): JSX.Element {\n  return <Link to={`/codes/${codeId}`}>Code #{codeId}</Link>;\n}\n","import { types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ellideMiddle } from \"../../ui-utils\";\n\nexport interface Execution {\n  readonly key: string;\n  readonly height: number;\n  readonly transactionId: string;\n  readonly msg: types.MsgExecuteContract;\n}\n\ninterface Props {\n  readonly executions: readonly Execution[];\n}\n\nexport function ExecutionsTable({ executions }: Props): JSX.Element {\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Height</th>\n          <th scope=\"col\">Transaction ID</th>\n          <th scope=\"col\">Sender</th>\n        </tr>\n      </thead>\n      <tbody>\n        {executions.map((execution, index) => (\n          <tr key={execution.key}>\n            <th scope=\"row\">{index + 1}</th>\n            <td>{execution.height}</td>\n            <td>\n              <Link to={`/tx/${execution.transactionId}`} title={execution.transactionId}>\n                {ellideMiddle(execution.transactionId, 20)}\n              </Link>\n            </td>\n            <td>{execution.msg.value.sender}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { FlexibleRouter } from \"./components/FlexibleRouter\";\nimport CodePage from \"./pages/code/CodePage\";\nimport CodeslistPage from \"./pages/codeslist/CodeslistPage\";\nimport ContractPage from \"./pages/contract/ContractPage\";\nimport TxPage from \"./pages/tx/TxPage\";\nimport { settings } from \"./settings\";\n\nReactDOM.render(\n  <FlexibleRouter type={settings.deployment.routerType}>\n    <Switch>\n      <Route path=\"/codes/:codeId\" component={CodePage} />\n      <Route path=\"/contracts/:contractAddress\" component={ContractPage} />\n      <Route path=\"/tx/:txId\" component={TxPage} />\n      <Route component={() => <CodeslistPage />} />\n    </Switch>\n  </FlexibleRouter>,\n  document.getElementById(\"root\"),\n);\n","import React from \"react\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\n\ninterface Props {\n  readonly type: \"browser-router\" | \"hash-router\";\n  readonly children: React.ReactNode;\n}\n\nexport function FlexibleRouter({ type, children }: Props): JSX.Element {\n  switch (type) {\n    case \"browser-router\":\n      return <BrowserRouter basename={process.env.PUBLIC_URL}>{children}</BrowserRouter>;\n    case \"hash-router\":\n      return <HashRouter>{children}</HashRouter>;\n  }\n}\n","import \"./ContractPage.css\";\n\nimport { Account, ContractDetails, CosmWasmClient, types } from \"@cosmwasm/sdk\";\nimport React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nimport CodeLink from \"../../components/CodeLink\";\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\nimport { Execution, ExecutionsTable } from \"./ExecutionsTable\";\n\nexport default function ContractPage(): JSX.Element {\n  const { contractAddress: contractAddressParam } = useParams();\n  const contractAddress = contractAddressParam || \"\";\n\n  const [details, setDetails] = React.useState<ContractDetails | undefined>();\n  const [account, setAccount] = React.useState<Account | undefined>();\n  const [executions, setExecutions] = React.useState<readonly Execution[]>([]);\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.getContract(contractAddress).then(setDetails);\n    client.getAccount(contractAddress).then(setAccount);\n\n    const tags = [\n      {\n        key: \"message.contract_address\",\n        value: contractAddress,\n      },\n      {\n        key: \"message.action\",\n        value: \"execute\",\n      },\n    ];\n    client.searchTx({ tags: tags }).then(execTxs => {\n      const out = new Array<Execution>();\n      for (const tx of execTxs) {\n        for (const [index, msg] of tx.tx.value.msg.entries()) {\n          if (types.isMsgExecuteContract(msg)) {\n            out.push({\n              key: `${tx.hash}_${index}`,\n              height: tx.height,\n              transactionId: tx.hash,\n              msg: msg,\n            });\n          } else {\n            // skip\n          }\n        }\n      }\n      setExecutions(out);\n    });\n  }, [contractAddress]);\n\n  const pageTitle = <span title={contractAddress}>Contract {ellideMiddle(contractAddress, 15)}</span>;\n\n  return (\n    <div className=\"container mt-3 contract-container\">\n      <div className=\"row contract-row contract-row-first\">\n        <div className=\"col\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"breadcrumb-item\">\n                {details ? <CodeLink codeId={details.codeId} /> : <span>Loading …</span>}\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                {pageTitle}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </div>\n      <div className=\"row contract-row\">\n        <div className=\"col\">\n          <h1>{pageTitle}</h1>\n          <ul className=\"list-group list-group-horizontal\">\n            <li className=\"list-group-item\" title=\"Bank tokens owned by this contract\">\n              Balance: {printableBalance(account?.balance || [])}\n            </li>\n          </ul>\n        </div>\n        <div className=\"col\">\n          <h2>Init message</h2>\n          <pre>\n            <code>{details ? JSON.stringify(details.initMsg, null, 2) : \"Loading …\"}</code>\n          </pre>\n        </div>\n      </div>\n      <div className=\"row contract-row contract-row-last\">\n        <div className=\"col\">\n          <h2>Executions</h2>\n          {executions.length !== 0 ? (\n            <ExecutionsTable executions={executions} />\n          ) : (\n            <p>Contract was not yet executed</p>\n          )}\n        </div>\n      </div>\n\n      <FooterRow endpoint={settings.backend.nodeUrl} />\n    </div>\n  );\n}\n","import \"./TxPage.css\";\n\nimport { CosmWasmClient, IndexedTx, types } from \"@cosmwasm/sdk\";\nimport React, { Fragment } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport { FooterRow } from \"../../components/FooterRow\";\nimport { settings } from \"../../settings\";\nimport { ellideMiddle, printableBalance } from \"../../ui-utils\";\n\nexport default function TxPage(): JSX.Element {\n  const { txId: txIdParam } = useParams();\n  const txId = txIdParam || \"\";\n\n  const pageTitle = <span title={txId}>Tx {ellideMiddle(txId, 20)}</span>;\n\n  const [details, setDetails] = React.useState<IndexedTx | undefined | \"loading\">(\"loading\");\n\n  React.useEffect(() => {\n    const client = new CosmWasmClient(settings.backend.nodeUrl);\n    client.searchTx({ id: txId }).then(results => {\n      const firstResult = results.find(() => true);\n      setDetails(firstResult);\n    });\n  }, [txId]);\n\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row tx-row tx-row-first\">\n        <div className=\"col\">\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                {pageTitle}\n              </li>\n            </ol>\n          </nav>\n        </div>\n      </div>\n\n      <div className=\"row tx-row\">\n        <div className=\"col\">\n          <h1>{pageTitle}</h1>\n          <ul className=\"list-group list-group-horizontal mb-3\">\n            <li className=\"list-group-item\">\n              Height: {details === \"loading\" ? \"Loading...\" : details?.height || \"–\"}\n            </li>\n            <li className=\"list-group-item\">\n              Time: {details === \"loading\" ? \"Loading...\" : details?.timestamp || \"–\"}\n            </li>\n            <li className=\"list-group-item\">\n              Signatures: {details === \"loading\" ? \"Loading...\" : details?.tx.value.signatures.length || \"–\"}\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"row tx-row tx-row-last\">\n        <div className=\"col\">\n          <h2>Messages</h2>\n          <p>\n            A Cosmos SDK transaction is composed of one or more messages, that represent actions to be\n            executed.\n          </p>\n          {details === \"loading\" ? (\n            <p>Loading …</p>\n          ) : (\n            <div>\n              {details ? (\n                details.tx.value.msg.map((msg, index) => (\n                  <div className=\"card\" key={`${details.hash}_${index}`}>\n                    <div className=\"card-header\">Type: {msg.type}</div>\n                    <ul className=\"list-group list-group-flush\">\n                      {types.isMsgExecuteContract(msg) && (\n                        <Fragment>\n                          <li className=\"list-group-item\">\n                            Contract:{\" \"}\n                            <Link to={`/contracts/${msg.value.contract}`}>{msg.value.contract}</Link>\n                          </li>\n                          <li className=\"list-group-item\">Sender: {msg.value.sender}</li>\n                          <li className=\"list-group-item\">\n                            Sent funds: {printableBalance(msg.value.sent_funds)}\n                          </li>\n                          <li className=\"list-group-item\">\n                            <span title=\"The contract level message\">Handle message</span>:{\" \"}\n                            <pre className=\"mb-0\">{JSON.stringify(msg.value.msg, null, \"  \")}</pre>\n                          </li>\n                        </Fragment>\n                      )}\n                    </ul>\n                  </div>\n                ))\n              ) : (\n                <p>Transaction not found</p>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <FooterRow endpoint={settings.backend.nodeUrl} />\n    </div>\n  );\n}\n"],"sourceRoot":""}